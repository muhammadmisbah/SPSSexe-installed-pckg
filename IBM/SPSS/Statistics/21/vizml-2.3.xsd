<?xml version="1.0" encoding="UTF-8"?>
<!-- ***************************************************************** -->
<!--                                                                   -->
<!-- Licensed Materials - Property of IBM                              -->
<!--                                                                   -->
<!-- IBM SPSS Products: Visualization Platform                         -->
<!--                                                                   -->
<!-- (C) Copyright IBM Corp. 2003, 2011                                -->
<!--                                                                   -->
<!-- US Government Users Restricted Rights - Use, duplication or       -->
<!-- disclosure restricted by GSA ADP Schedule Contract with IBM       -->
<!-- Corp.                                                             -->
<!--                                                                   -->
<!-- ***************************************************************** -->


<xs:schema xmlns:vis="http://xml.spss.com/visualization" xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://xml.spss.com/visualization" elementFormDefault="qualified"
           attributeFormDefault="unqualified" version="2.3">
    <xs:annotation>
        <xs:documentation xml:lang="en">Copyright 2005 SPSS Inc - All Rights Reserved. SPSS specifically disclaims all
            warranties with respect to your use of this specification, expressed, implied, or otherwise, including
            without limitation, all warranties of merchantability and fitness for a particular purpose. SPSS shall not
            be liable for any special, incidental, or consequential damages, including without limitation lost revenues
            or lost profits resulting from the use of the information herein.
        </xs:documentation>
    </xs:annotation>
    <xs:element name="visualization">
        <xs:annotation>
            <xs:documentation>The top-level element, also known as the document or root element. This element contains a
                complete specification of a visualization. It is also a frame, and therefore can have styles and
                sizes
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:frame">
                    <xs:sequence>
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>Sources.</xs:documentation>
                            </xs:annotation>
                            <xs:element ref="vis:reshapeSource"/>
                            <xs:element ref="vis:databaseSource"/>
                            <xs:element ref="vis:delimitedFileSource"/>
                            <xs:element ref="vis:embeddedSource"/>
                            <xs:element ref="vis:streamingSource"/>
                            <xs:element ref="vis:userSource"/>
                        </xs:choice>
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>Variables and data.</xs:documentation>
                            </xs:annotation>
                            <xs:element ref="vis:sourceVariable"/>
                            <xs:element ref="vis:derivedVariable"/>
                            <xs:element ref="vis:expressionVariable"/>
                            <xs:element ref="vis:categoricalDomain"/>
                            <xs:element ref="vis:intervalDomain"/>
                        </xs:choice>
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>frames.</xs:documentation>
                            </xs:annotation>
                            <xs:element ref="vis:graph"/>
                            <xs:element ref="vis:container"/>
                            <xs:element ref="vis:legend"/>
                            <xs:element ref="vis:labelFrame"/>
                            <xs:element ref="vis:controlFrame"/>
                        </xs:choice>
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>styles.</xs:documentation>
                            </xs:annotation>
                            <xs:element ref="vis:style"/>
                            <xs:element ref="vis:styleCycle"/>
                        </xs:choice>
                        <xs:group ref="vis:interaction" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                    <xs:attribute name="lang" type="xs:language">
                        <xs:annotation>
                            <xs:documentation>Determines the language of the graph. If no language is specified, the
                                local language is determined from the operating system.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="name" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>For documentation; not used directly to generate a
                                visualization.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="author" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>For documentation; not used directly to generate a
                                visualization.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="description" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>For documentation; not used directly to generate a
                                visualization.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="version" type="xs:float" use="required">
                        <xs:annotation>
                            <xs:documentation>The specification version. This is usually the same as the schema version,
                                but may be less, for example when a schema has been updated to a more recent version. If
                                any of the meanings of schema elements have changed (which is very rare), this attribute
                                determines what the behavior is to be.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="creator" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>For documentation; not used directly to generate a
                                visualization.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="date" type="xs:date">
                        <xs:annotation>
                            <xs:documentation>For documentation; not used directly to generate a
                                visualization.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="type" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>For documentation; not used directly to generate a
                                visualization.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="container">
        <xs:annotation>
            <xs:documentation>A frame that contains other frames (containers, graphs, legends, and text
                frames).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:frame">
                    <xs:choice minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:container"/>
                        <xs:element ref="vis:graph"/>
                        <xs:element ref="vis:legend"/>
                        <xs:element ref="vis:labelFrame"/>
                        <xs:element ref="vis:controlFrame"/>
                    </xs:choice>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="controlFrame">
        <xs:annotation>
            <xs:documentation>A frame that contains a visualization control. This is an experimental feature and should
                not be used at present.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:frame">
                    <xs:attribute name="targetSpecification" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The specification to change.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="targetAttribute" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The attribute on the target specification to change.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="min" type="xs:double">
                        <xs:annotation>
                            <xs:documentation>The minimum value to allow for the target attribute.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="title" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The title for the control.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="max" type="xs:double">
                        <xs:annotation>
                            <xs:documentation>The maximum value to allow for the target attribute.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="divisions" type="xs:int">
                        <xs:annotation>
                            <xs:documentation>The step size between min and max values.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="labelFrame">
        <xs:annotation>
            <xs:documentation>A frame that contains a text label.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:frame">
                    <xs:sequence minOccurs="0">
                        <xs:element ref="vis:label"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="label">
        <xs:annotation>
            <xs:documentation>A title or other label.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:labelType">
                    <xs:attribute name="purpose">
                        <xs:annotation>
                            <xs:documentation>The purpose of the label.</xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="title">
                                    <xs:annotation>
                                        <xs:documentation>A title.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="subTitle">
                                    <xs:annotation>
                                        <xs:documentation>A subtitle.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="subSubTitle">
                                    <xs:annotation>
                                        <xs:documentation>A sub subtitle.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="footnote">
                                    <xs:annotation>
                                        <xs:documentation>A footnote.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="subFootnote">
                                    <xs:annotation>
                                        <xs:documentation>A subFootnote.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="subSubFootnote">
                                    <xs:annotation>
                                        <xs:documentation>A sub subfootnote.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="layer">
                                    <xs:annotation>
                                        <xs:documentation>A layer label.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="alternateLabel">
        <xs:annotation>
            <xs:documentation>An alternative label to use for different locales.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:labelType">
                    <xs:attribute name="lang" type="xs:language">
                        <xs:annotation>
                            <xs:documentation>If multiple labels are specified, the one whose 'lang' attribute most
                                closely matches the language of the chart is used.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="legend">
        <xs:annotation>
            <xs:documentation>A legend displays a frame containing small representations of graphical elements (called
                'swatches') and some text showing what they represent. Each legend frame may show several elements and
                their corresponding values.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:frame">
                    <xs:sequence>
                        <xs:element ref="vis:label" minOccurs="0"/>
                        <xs:element name="legendTarget" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>A component of the legend. A simple legend has one target. If multiple
                                    targets are present, all the generated ticks are concatenated
                                    together.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:ID">
                                    <xs:annotation>
                                        <xs:documentation>An identifier for this element. The identifier must be unique
                                            within the document and is required only when another element must reference
                                            this one.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="target" type="xs:IDREF" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The target to show in the legend. This may be an aesthetic, in
                                            which case labels and swatches are drawn to show how the aesthetic maps to
                                            data; or the target may be an element or guide, in which case a single
                                            swatch and label are shown giving the name of the element or guide and its
                                            appearance.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="domain" type="xs:IDREF">
                                    <xs:annotation>
                                        <xs:documentation>A domain specifying which entries may be shown in the legend.
                                            Normally this is inferred from the aesthetic involved.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="link" type="xs:anyURI">
                                    <xs:annotation>
                                        <xs:documentation>A URI that is followed when this legend target is
                                            clicked.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="tickTextStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The style used for the text in the legend swatch
                                labels.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="tickFrameStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The style for the frame surrounding the legend swatch
                                labels.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="reverse" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, the legend is displayed in reverse order.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="verticalFlow" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, the legend is displayed vertically; if false, the legend is
                                displayed horizontally.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="numberOfRows" type="xs:int">
                        <xs:annotation>
                            <xs:documentation>The desired number of rows in the legend.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="numberOfColumns" type="xs:int">
                        <xs:annotation>
                            <xs:documentation>The desired number of columns in the legend.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="location">
        <xs:annotation>
            <xs:documentation>The bounds of the frame, specified relative to the parent frame.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="part" type="vis:locationPartType" use="required">
                <xs:annotation>
                    <xs:documentation>What part of the location this element defines.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="method" type="vis:locationMethodType">
                <xs:annotation>
                    <xs:documentation>The method used to define the location.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Defines the desired value for the frame part location.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="min" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Defines a minimum value that will override the desired value when
                        applicable.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="max" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Defines a maximum value that will override the desired value when
                        applicable.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="target" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>For a method that is relative to another frame, this defines the target
                        frame.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="graph">
        <xs:annotation>
            <xs:documentation>A frame that defines coordinates, elements, aesthetics, and other entities to produce a
                statistical graph.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:frame">
                    <xs:sequence>
                        <xs:element ref="vis:coordinates" minOccurs="0" maxOccurs="unbounded"/>
                        <xs:element ref="vis:faceting" minOccurs="0"/>
                        <xs:element name="facetLayout" minOccurs="0">
                            <xs:annotation>
                                <xs:documentation>A description of how to label and lay out levels of a
                                    facet.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                                    <xs:annotation>
                                        <xs:documentation>The facetLabel's axes are added in the order specified,
                                            working from outside the chart to inside.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:element ref="vis:label" minOccurs="0"/>
                                    <xs:element name="facetLevel" minOccurs="0">
                                        <xs:annotation>
                                            <xs:documentation>Controls the layout and style of the facets and provides a
                                                place on facet dimensions for axes to be defined.
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence minOccurs="0" maxOccurs="2">
                                                <xs:element ref="vis:axis"/>
                                            </xs:sequence>
                                            <xs:attribute name="id" type="xs:ID">
                                                <xs:annotation>
                                                    <xs:documentation>An identifier for this element. The identifier
                                                        must be unique within the document and is required only when
                                                        another element must reference this one.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="level" type="xs:positiveInteger" use="required">
                                                <xs:annotation>
                                                    <xs:documentation>The level of the faceting to which facetLevel
                                                        applies. It is legal to specify levels that are not present in
                                                        the chart; they will simply be ignored. Level 1 is the first
                                                        dimension (the level in a simple paneled chart); level 2 is the
                                                        next dimension in a 2-way table, and so on.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="gap" type="vis:length">
                                                <xs:annotation>
                                                    <xs:documentation>The total gap to leave between cells at this
                                                        level. If expressed in absolute coordinates, care must be taken
                                                        to ensure the size is not larger than the size of the
                                                        cell.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="style" type="xs:IDREF">
                                                <xs:annotation>
                                                    <xs:documentation>Style for the cells at this level of
                                                        faceting.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="zOrder" type="xs:int">
                                                <xs:annotation>
                                                    <xs:documentation>Integer that determines the order in which items
                                                        are drawn. If this is not specified, items are drawn in the
                                                        order they are found in the specification.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>


                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element ref="vis:setCellProperties" minOccurs="0"/>
                                </xs:sequence>

                                <xs:attribute name="cellAspect" type="xs:double">
                                    <xs:annotation>
                                        <xs:documentation>If set, forces each cell to be the given aspect
                                            ratio.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="cellSize" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>If set to a length, requires cells to have this size. If the
                                            aspect ratio is not set, it is assumed to be 1.
                                            Note that if the overall graph size is set, this value may be ignored as the
                                            overall size is taken to be more important.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="formatAxesAsTable" type="xs:boolean">
                                    <xs:annotation>
                                        <xs:documentation>If the value of this attribute is true, then rather than the
                                            frame style
                                            applying to a box fitting around the axis ticks, it will be applied to all
                                            the space
                                            available for the tick mark.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="topDown" type="xs:boolean">
                                    <xs:annotation>
                                        <xs:documentation>Denotes whether to require a layout to be top-down
                                            (table-like) as opposed to bottom-up (chart-like).
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="method">
                                    <xs:annotation>
                                        <xs:documentation>The overall method of laying out the cells.</xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:enumeration value="structured">
                                                <xs:annotation>
                                                    <xs:documentation>Lay out in a table-like format.</xs:documentation>
                                                </xs:annotation>
                                            </xs:enumeration>
                                            <xs:enumeration value="unstructured">
                                                <xs:annotation>
                                                    <xs:documentation>Lay out as a single long list, wrapped into the
                                                        available space.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:enumeration>
                                            <xs:enumeration value="transposed">
                                                <xs:annotation>
                                                    <xs:documentation>Lay out in a table-like format, however start the
                                                        layout vertically rather than horizontally.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:enumeration>
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="id" type="xs:ID">
                                    <xs:annotation>
                                        <xs:documentation>An identifier for this element. The identifier must be unique
                                            within the document and is required only when another element must reference
                                            this one.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:group ref="vis:element" minOccurs="0" maxOccurs="unbounded"/>
                        <xs:group ref="vis:guide" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                    <xs:attribute name="cellStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The style for the cell frame (inner frame).</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="axesOutside" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Defines whether to draw axes outside the frame when
                                possible.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="alignCellHorizontallyWith" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>Defines a dimension with which to align this graph's top
                                cell.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="alignCellVerticallyWith" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>Defines a dimension with which to align this graph's top
                                cell.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="coordinates">
        <xs:annotation>
            <xs:documentation>Defines the coordinate system for the graph. Elements are placed within a coordinate
                system.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The order of the dimension elements determines which dimension they refer to. The
                        first dimension specified is 'X', the second 'Y', etc.
                    </xs:documentation>
                </xs:annotation>
                <xs:element name="dimension">
                    <xs:annotation>
                        <xs:documentation>Defines a dimension of the coordinate system.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="vis:scale" minOccurs="0"/>
                            <xs:element ref="vis:axis" minOccurs="0" maxOccurs="2"/>
                        </xs:sequence>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="domain" type="xs:IDREF">
                            <xs:annotation>
                                <xs:documentation>The domain defines how data is mapped into this dimension. Data at the
                                    top of the domain are mapped to the maximum value on this dimension. Data at the
                                    lower end of the domain are mapped to the minimum value of the
                                    dimension.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="unionDomain" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>If true, the domain specified will be unioned with the default domain
                                    instead of overriding it.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="niceUpperMapping" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>Whether to modify the upper bound to a nice round number or leave it
                                    exactly as defined by the domain.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="niceLowerMapping" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>Whether to modify the lower bound to a nice round number or leave it
                                    exactly as defined by the domain.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="upperMargin" type="vis:length">
                            <xs:annotation>
                                <xs:documentation>Amount to extend past the domain to provide a margin at the top where
                                    data are not expected.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="lowerMargin" type="vis:length">
                            <xs:annotation>
                                <xs:documentation>Amount to extend past the domain to provide a margin at the top where
                                    data are not expected.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="clusterVariable" type="xs:IDREF">
                            <xs:annotation>
                                <xs:documentation>If defined, categories from this categorical variable are used to
                                    subdivide the dimension and provide clustering in this dimension.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="clusterGap" type="vis:length">
                            <xs:annotation>
                                <xs:documentation>The gap between clusters on the dimension. This is relevant only if
                                    clusterVariable is specified.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="dimensionReference">
                    <xs:annotation>
                        <xs:documentation>Refers to a dimension in a different coordinate system. This means that a
                            dimension is effectively shared across coordinate systems.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="ref" type="xs:IDREF" use="required">
                            <xs:annotation>
                                <xs:documentation>The dimension to reference.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="rotationTransform">
                    <xs:annotation>
                        <xs:documentation>A coordinate transform that rotates around a dimension.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="dimension" type="vis:dimensionName">
                            <xs:annotation>
                                <xs:documentation>The dimension about which to rotate. Defaults to
                                    'z'
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="angle" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>The angle to rotate by (in degrees).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="reflectionTransform">
                    <xs:annotation>
                        <xs:documentation>A coordinate transform that reflects around a dimension.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="dimension" type="vis:dimensionType">
                            <xs:annotation>
                                <xs:documentation>The dimension in which to reflect.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="alternating" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>Whether reflection should alternate between facet faces, so that every
                                    other facet is reflected.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="obliqueTransform">
                    <xs:annotation>
                        <xs:documentation>A coordinate transform for 3D that performs an oblique
                            projection.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="theta" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Angle at which to project.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="distance" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Distance from the viewer. '1' is normal and values in the range 0.2 ..
                                    3 are useful.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="foreShortening" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>How deep the projection extends. '1' is normal; '0' means no
                                    extension.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="xscale" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Multiplier for distorting x dimension.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="yscale" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Multiplier for distorting y dimension.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="dx" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Offset the projection in the x dimension. Useful values are in the
                                    range 0 to 1.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="dy" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Offset the projection in the y dimension. Useful values are in the
                                    range 0 to 1.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="rectangularTransform">
                    <xs:annotation>
                        <xs:documentation>A coordinate transform for 3D that performs a viewpoint
                            change.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="theta" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Angle to rotate around 'x' axis.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="phi" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Angle to rotate around 'y' axis.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="zeta" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Angle to rotate around 'z' axis.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="distance" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Distance from the viewer. '1' is normal and values in the range 0.2 ..
                                    3 are useful.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="projectionDistance" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Distance to infinity (where all lines converge). Provides parallax
                                    effect if less than infinity.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="xscale" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Multiplier for distorting x dimension.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="yscale" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Multiplier for distorting y dimension.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="zscale" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Multiplier for distorting z dimension.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="dx" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Offset the projection in the x dimension. Useful values are in the
                                    range 0 to 1.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="dy" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Offset the projection in the y dimension. Useful values are in the
                                    range 0 to 1.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="mapProjection">
                    <xs:annotation>
                        <xs:documentation>Treats the data as latitiude/longitude and projects according to a
                            transformation.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="type">
                            <xs:annotation>
                                <xs:documentation>Method to use for the projection.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="lambert">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Lambert Conic Conformal Projection (Lambert projection) is useful for
                                                continental and smaller areas and has the familiar look where the
                                                western
                                                Canadian/US border is an arc. The Lambert projection is a conic
                                                projection and projected parallels are arcs of concentric circles
                                                centered at the pole. The projected meridians are radii of concentric
                                                circles that meet at the pole.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="mercator">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Mercator Projection is useful for global maps. The Mercator projection
                                                projects parallels as horizontal lines and meridians as vertical lines.
                                                The poles are not defined in the Mercator projection.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="transverseMercator">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Transverse Mercator Projection is useful for continental and smaller
                                                maps
                                                and has the familiar look where the western Canadian/US border is an
                                                arc. Both the central meridian and the equator are straight lines, no
                                                other parallel or meridian is a straight line.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="orthographic">
                                        <xs:annotation>
                                            <xs:documentation>
                                                An orthographic projection is a two-dimensional map typically used for
                                                view of the whole globe. The shapes and areas are distorted, but
                                                distances are preserved along parallels.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="winkelTripel">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Mainly useful as a whole-earth projection; this combines a cylindrical
                                                projection and a Aikoff projection to produce a transformation that
                                                achieves similar results to Robinson's, only better.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="fishEyeTransform">
                    <xs:annotation>
                        <xs:documentation>Magnifies a local area in a radial fashion.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="magnification" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Magnification factor.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="radius" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Radius to magnify on a 0 to 1 scale.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="x" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>x location of the center of magnification.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="y" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>y location of the center of magnification.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="functionalTransform">
                    <xs:annotation>
                        <xs:documentation>Transforms a single dimension based on a specified
                            function.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="dimension" type="vis:dimensionType">
                            <xs:annotation>
                                <xs:documentation>Dimension to transform.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="method">
                            <xs:annotation>
                                <xs:documentation>Method to use for the transformation.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="cosine"/>
                                    <xs:enumeration value="log"/>
                                    <xs:enumeration value="power"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="base" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Base or exponent to use for the method.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="insetTransform">
                    <xs:annotation>
                        <xs:documentation>Insets the coordinates for each dimension.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="x-min" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>amount to inset the x dimension's minimum value. 0 to 1 is the useful
                                    range.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="y-min" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>amount to inset the y dimension's minimum value. 0 to 1 is the useful
                                    range.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="z-min" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>amount to inset the z dimension's minimum value. 0 to 1 is the useful
                                    range.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="x-max" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>amount to inset the x dimension's maximum value. 0 to 1 is the useful
                                    range.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="y-max" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>amount to inset the y dimension's maximum value. 0 to 1 is the useful
                                    range.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="z-max" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>amount to inset the z dimension's maximum value. 0 to 1 is the useful
                                    range.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>The identifier for this item.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="polarTransform">
                    <xs:annotation>
                        <xs:documentation>Converts the first two dimensions to polar coordinates.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="startAngle" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>Angle at which to start relative to the positive horizontal
                                    axis.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="cycles" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>How many cycles to wrap around. Defaults to 1.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="counterClockwise" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>If true, direction is counterclockwise.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="sameRatioTransform">
                    <xs:annotation>
                        <xs:documentation>A transformation that preserves the ratio of data units to screen pixels
                            between the first two dimensions.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="center" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>When there is extra space on the chart as a result of the projection,
                                    center the projection.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="transposeTransform">
                    <xs:annotation>
                        <xs:documentation>A coordinate transform that transposes the first two
                            dimensions.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="dimension1">
                            <xs:annotation>
                                <xs:documentation>One of the dimensions to swap position.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:int">
                                    <xs:minInclusive value="1"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="dimension2">
                            <xs:annotation>
                                <xs:documentation>Other dimension to swap position.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:int">
                                    <xs:minInclusive value="1"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="parallelCoordinatesTransform">
                    <xs:annotation>
                        <xs:documentation>A coordinate transformation that implements parallel coordinates, which reduce
                            many dimensions to two.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="axis">
        <xs:annotation>
            <xs:documentation>Defines a visual representation of a dimension.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="vis:label" minOccurs="0"/>
                <xs:sequence minOccurs="0">
                    <xs:element ref="vis:majorTicks"/>
                    <xs:element ref="vis:minorTicks" minOccurs="0"/>
                </xs:sequence>
                <xs:element name="axisTransformParameter" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>Parameters to be used by axis transformations.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="parameterName" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>Name for the parameter.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="parameterValue">
                            <xs:annotation>
                                <xs:documentation>Value for the parameter.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="style" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>The style for drawing the base line of the axis.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="opposite" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Axes are drawn in the most suitable position, for example, to the left of or below
                        a simple rectangular plot. If this is set to true, they will be drawn opposite their preferred
                        position.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="transform">
                <xs:annotation>
                    <xs:documentation>Apply a transform to the ticks for the axis.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="linear"/>
                        <xs:enumeration value="percent"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="maxSize" type="vis:length">
                <xs:annotation>
                    <xs:documentation>An axis takes up part of the frame. It is sized dynamically to balance display
                        requirements. By default it can take up no more than a given fraction of a display (this
                        fraction may vary by situation). Setting this value allows an axis to extend to a given fraction
                        of screen space.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="repeat">
                <xs:annotation>
                    <xs:documentation>Whether to add an axis on each cell in a faceting.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:NMTOKEN">
                        <xs:enumeration value="never">
                            <xs:annotation>
                                <xs:documentation>Never repeat the axes.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="always">
                            <xs:annotation>
                                <xs:documentation>Always repeat the axes.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="combineAxisLabels" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, all axis labels of a given label will be combined into a single axis
                        label. If false, they are repeated on a per-row or per-column basis.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="zOrder" type="xs:int">
                <xs:annotation>
                    <xs:documentation>Integer that determines the order in which items are drawn. If this is not
                        specified, items are drawn in the order they are found in the specification.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="majorTicks">
        <xs:annotation>
            <xs:documentation>Tick marks for an axis.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:ticksType">
                    <xs:choice minOccurs="0">
                        <xs:element ref="vis:label" minOccurs="0"/>
                        <xs:group ref="vis:format"/>
                    </xs:choice>
                    <xs:attribute name="style" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The style for each of the tick labels.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="tickFrameStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The style for each of the tick label's frames.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="labelAngle">
                        <xs:annotation>
                            <xs:documentation>An angle in degrees between 0 and 360 specifying at what angle the labels
                                for the ticks should be drawn. Zero is horizontal. If left undefined a suitable angle is
                                chosen so as to make the axis as legible as possible in as compact a space as
                                possible.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minInclusive value="-360"/>
                                <xs:maxInclusive value="360"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="stagger" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, a staggered pattern is applied, with every second label placed a
                                line lower than usual, so that longer labels can be drawn without occlusion. Tick marks
                                are extended so they connect to the staggered labels. If undefined, stagger may be
                                chosen if it is the best way to make the axis legible and compact.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="labelFrequency" type="xs:positiveInteger">
                        <xs:annotation>
                            <xs:documentation>If set greater than 1, labels will be skipped so as to show every nth
                                label, where n is the value of this attribute.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="delta" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The increment between two tick marks, expressed in the units of the data
                                itself. For date data, the deltaUnit attribute defines which units to
                                use.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="deltaUnit">
                        <xs:annotation>
                            <xs:documentation>For date scales, determines what the units for the delta
                                are.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="second"/>
                                <xs:enumeration value="minute"/>
                                <xs:enumeration value="hour"/>
                                <xs:enumeration value="day"/>
                                <xs:enumeration value="week"/>
                                <xs:enumeration value="month"/>
                                <xs:enumeration value="year"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="base" type="vis:dateOrNumber" default="0">
                        <xs:annotation>
                            <xs:documentation>A value at which a tick mark is desired. Ticks start at this value and
                                then are placed above and below this value at integral increments of the delta value
                                (which is chosen automatically if not specified). Only ticks lying within the axes
                                bounds are displayed. It is legal for this value to be outside the axis range. For
                                example, if the axis range is [7,23] and delta is 4, a base of 1 will place ticks at 9,
                                13, 17, 21.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="minorTicks">
        <xs:annotation>
            <xs:documentation>Minor tick marks for an axis.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:ticksType">
                    <xs:attribute name="number" type="xs:positiveInteger">
                        <xs:annotation>
                            <xs:documentation>The number of minor ticks per major tick division.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="color">
        <xs:annotation>
            <xs:documentation>Maps a variable to the color of a graphic item. The color includes all components of the
                color (hue, saturation, brightness, transparency), so if used with those aesthetics, this one should be
                specified first.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:colorMapping" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="affect" type="vis:colorAffectType" default="fill">
                        <xs:annotation>
                            <xs:documentation>Type of color affected. Fill colors are for the interior of a drawn object
                                while a stroke color is for the edge of the drawn object. Note that some objects, such
                                as lines do not have an interior. "main" is usually a fill color. "secondary" is usually
                                a stroke color. "both" affects both. "fill" is explicitly a fill color. "main" or
                                "secondary" is preferred. "stroke" is explicitly a stroke color. "main"
                                or "secondary" is preferred.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="cycle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The cycle that will be applied to categorical data. The colors will
                                be extracted from the style cycle and used for each distinct category in the data in
                                order.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="missing" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The name of the color to which missing values are
                                mapped.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="low" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The name of the color at the high end of the range.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="high" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The name of the color at the high end of the range.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>

                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="offset">
        <xs:annotation>
            <xs:documentation>Maps a variable to an offset that is used to nudge the variable in the y direction. Note
                that this happens after any coordinate transforms. A common use is to explode pie
                slices.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:attribute name="missing" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The value to map missing values to. If the length is a percent, then the
                                low size is a
                                percentage of the whole chart space.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="low" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The low length. If the length is a percent, then the low size is a
                                percentage of the whole chart space.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="high" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The high length. If the length is a percent, then the high size is a
                                percentage of the whole chart space.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="image">
        <xs:annotation>
            <xs:documentation>Maps a categorical variable to an image used in the interior of the
                element.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:stringMapping" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="missing" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The image to map missing values to</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="cycle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The cycle that will be applied to categorical data. The images will
                                be extracted from the style cycle and used for each distinct category in the data in
                                order
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="pattern">
        <xs:annotation>
            <xs:documentation>Maps a categorical variable to a pattern used to fill the interior of the
                element.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:integerMapping" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="missing" type="xs:int">
                        <xs:annotation>
                            <xs:documentation>The pattern index to map missing values to</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="cycle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The cycle that will be applied to categorical data. The patterns will
                                be extracted from the style cycle and used for each distinct category in the data in
                                order
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="visibility">
        <xs:annotation>
            <xs:documentation>Maps a variable to a visibility of 'false' or 'true'. Any value strictly greater than zero
                is considered visible for continuous variables.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:booleanMapping" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="low" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether the top of the range is visible or not</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="high" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether the bottom of the range is visible or not</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="missing" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether a missing value is visible or not</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="labeling">
        <xs:annotation>
            <xs:documentation>Labels the elements by a variable</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence>
                        <xs:choice minOccurs="0">
                            <xs:group ref="vis:format"/>
                        </xs:choice>
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                            <xs:element ref="vis:visibility"/>
                            <xs:element ref="vis:styleBy"/>
                            <xs:element ref="vis:size"/>
                            <xs:element ref="vis:color"/>
                            <xs:element ref="vis:colorComponent"/>
                            <xs:element ref="vis:transparency"/>
                            <xs:element ref="vis:rotation"/>
                            <xs:element ref="vis:labelLocation"/>
                        </xs:choice>
                    </xs:sequence>
                    <xs:attribute name="style" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The style for the text of the labeling.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="textFrameStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The style for the frame surrounding the text of the
                                labeling.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="connectingLines" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, connecting lines are drawn to labels that are sufficiently far
                                away from their targets.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="minConnectingLineLength" type="vis:length">
                        <xs:annotation>
                            <xs:documentation>The minimum distance at which to add a connecting line.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="missing" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The label to display for missing values</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="colorComponent">
        <xs:annotation>
            <xs:documentation>Maps a variable to a specific color component (e.g., brightness) of a graphic
                item.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:doubleMapping" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="missing" type="xs:double">
                        <xs:annotation>
                            <xs:documentation>The value to map missing values to</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="low" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The minimum value for the color component. May be a hue index or a color
                                value, in which case the component will be taken from that color.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="high" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The maximum value for the color component. May be a hue index or a color
                                value, in which case the component will be taken from that color.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="type" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The specific color component (e.g., hue).</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="affect" type="vis:colorAffectType" default="fill">
                        <xs:annotation>
                            <xs:documentation>Type of color affected. Fill colors are for the interior of a drawn object
                                while a stroke color is for the edge of the drawn object. Note that some objects, such
                                as lines do not have an interior. "main" is usually a fill color. "secondary" is usually
                                a stroke color. "both" affects both. "fill" is explicitly a fill color. "main" or
                                "secondary" should be used instead. "stroke" is explicitly a stroke color. "main" or
                                "secondary" should be used instead.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="dateTimeFormat">
        <xs:annotation>
            <xs:documentation>Defines the format of a date/time value. The format consists of numerous options for
                representation of dates. If an option is undefined, the locale defines whether or not to set it, so the
                most appropriate value is chosen based on the locale. All options modify this default
                behavior.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:formatType">
                    <xs:attribute name="baseFormat" use="required">
                        <xs:annotation>
                            <xs:documentation>This defines the base format. A dateTime may be just a date, just a time,
                                or may be both. Default values of all fields will be chosen based on the locale and on
                                the value of this field.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="date">
                                    <xs:annotation>
                                        <xs:documentation>Format using just the date.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="time">
                                    <xs:annotation>
                                        <xs:documentation>Format using just the time.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="dateTime">
                                    <xs:annotation>
                                        <xs:documentation>Format using both date and time.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="dayOfMonthPadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, this field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="weekPadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, this field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="dayPadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, day field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="hourPadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, this field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="minutePadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, this field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="secondPadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, this field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showEra" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showYear" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showQuarter" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showMonth" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showWeek" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showDay" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showHour" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showMinute" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showSecond" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showMillis" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="dayOfWeekAbbreviation" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to abbreviate the day of the week.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="yearAbbreviation" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to abbreviate the year (drop century or
                                not).
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="quarterPrefix" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Add a prefix for the quarter (e.g., 'Q' to get Q1, Q2, Q3,
                                Q4).
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="quarterSuffix" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Add a suffix for the quarter (e.g., 'q' to get 1q, 2q, 3q,
                                4q).
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="dayType">
                        <xs:annotation>
                            <xs:documentation>Whether to show the day as day within month or day within
                                year.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="month">
                                    <xs:annotation>
                                        <xs:documentation>Show the day of month. February 1 = 1</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="year">
                                    <xs:annotation>
                                        <xs:documentation>Show the day of year. February 1 = 32</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="hourFormat">
                        <xs:annotation>
                            <xs:documentation>Choice of hour display method, in am/pm style (1pm), 24-hour style (13) or
                                12-hour style (1).
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="AMPM">
                                    <xs:annotation>
                                        <xs:documentation>Show the time of day in an AM/PM format. Midnight = 12:00am,
                                            Noon = 12:00pm
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="AS_24">
                                    <xs:annotation>
                                        <xs:documentation>Show the time of day in 24 hour format. Midnight = 24:00, Noon
                                            = 12:00
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="AS_12">
                                    <xs:annotation>
                                        <xs:documentation>Show the time of day without indicating morning or afternoon.
                                            Midnight = 12:00, Noon = 12:00
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="monthFormat">
                        <xs:annotation>
                            <xs:documentation>Format for the month: short (Mar), long (March), number (3), or
                                paddedNumber (03).
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="short">
                                    <xs:annotation>
                                        <xs:documentation>Use the short form of the month. January =
                                            Jan.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="long">
                                    <xs:annotation>
                                        <xs:documentation>Use the long form of the month. January =
                                            January.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="number">
                                    <xs:annotation>
                                        <xs:documentation>Use the numeric form of the month. January =
                                            1.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="paddedNumber">
                                    <xs:annotation>
                                        <xs:documentation>Use the numeric form of the month, padded to be the same
                                            length. January = 01
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="showDayOfWeek" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not days of the week will be shown.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="point" type="vis:elementType">
        <xs:annotation>
            <xs:documentation>A point element.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="line">
        <xs:annotation>
            <xs:documentation>A line element.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:elementType">
                    <xs:attributeGroup ref="vis:lineAttributes"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="interval">
        <xs:annotation>
            <xs:documentation>An interval (bar) element.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:elementType">
                    <xs:attribute name="centerIn3D" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, center extruded elements in 3D. If false, they are extruded
                                behind the location given for the z dimension.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="polygon">
        <xs:annotation>
            <xs:documentation>A polygonal element.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:elementType">
                    <xs:attribute name="preserveStraightLines" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, lines are not curved within the space, but drawn straight from
                                defined point to defined point.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="area">
        <xs:annotation>
            <xs:documentation>An area element.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:elementType">
                    <xs:attributeGroup ref="vis:lineAttributes"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="schema">
        <xs:annotation>
            <xs:documentation>A schema element (also known as a boxplot).</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:elementType">
                    <xs:attribute name="medianStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>Overrides the basic style to set a particular style for the median line on
                                the schema element.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="fenceStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>Overrides the basic style to set a particular style for fence on the
                                schema element.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="hingeStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>Overrides the basic style to set a particular style for the hinge on the
                                schema element.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="outlierStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>Overrides the basic style to set a particular style for the
                                outliers.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="extremeStyle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>Overrides the basic style to set a particular style for the extreme
                                outliers.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="edge">
        <xs:annotation>
            <xs:documentation>An edge element. Known in previous versions as the 'link' element</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:elementType">
                    <xs:attribute name="preserveStraightLines" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, lines are not curved within the space, but drawn straight from
                                defined point to defined point.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="path">
        <xs:annotation>
            <xs:documentation>A path element.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:elementType">
                    <xs:attributeGroup ref="vis:lineAttributes"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="conditionalStyle">
        <xs:annotation>
            <xs:documentation>Applies a style to an element for only specific facets.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="when" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>A boolean expression using facets that determines when the style is applied.
                        Examples are "facet1 != facet2" or "facet1 == 2".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="style" type="xs:IDREF" use="required">
                <xs:annotation>
                    <xs:documentation>Style to apply when the expression evaluates to true.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="gridline">
        <xs:annotation>
            <xs:documentation>Display grid lines from tick mark locations for this set of ticks.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="vis:conditionalStyle" minOccurs="0"/>
                <xs:element ref="vis:styleReference" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="style" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>The style for the gridlines.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="zOrder" type="xs:int">
                <xs:annotation>
                    <xs:documentation>Integer that determines the order in which items are drawn. If this is not
                        specified, items are drawn in the order they are found in the specification.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="elapsedTimeFormat">
        <xs:annotation>
            <xs:documentation>Defines the output format of elapsed time.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:formatType">
                    <xs:attribute name="baseFormat" use="required">
                        <xs:annotation>
                            <xs:documentation>This defines the base format. A dateTime may be just a date, just a time,
                                or may be both. Default values of all fields will be chosen based on the locale and on
                                the value of this field.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="date">
                                    <xs:annotation>
                                        <xs:documentation>Format using just the date.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="time">
                                    <xs:annotation>
                                        <xs:documentation>Format using just the time.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="dateTime">
                                    <xs:annotation>
                                        <xs:documentation>Format using both date and time.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="dayPadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, day field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="hourPadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, this field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="minutePadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, this field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="secondPadding" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, this field will be padded.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showYear" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showDay" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showHour" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showMinute" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showSecond" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="showMillis" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to show this time field.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="numberFormat">
        <xs:annotation>
            <xs:documentation>Specification for formatting a number.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:formatType">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>When applying the scalingFactors in this sequence, the scaling factor that
                                produces the smallest non-zero integer part is used.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:element name="unitRule">
                            <xs:annotation>
                                <xs:documentation>Specifies a rule to use for abbreviating a number. When such a rule
                                    is applied, it overrides the numberFormat's scaling factor and replaces its suffix
                                    and prefix if defined in the rule; otherwise, the suffix and prefix are left
                                    alone.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:attribute name="factor" type="xs:double" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The strictly positive value used to scale the number to be
                                            formatted. This rule may only be applied if the result has a non-zero
                                            integer part.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="prefix" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>When this rule is applied, this string replaces the
                                            numberFormat's prefix.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="suffix" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>When this rule is applied, this string replaces the
                                            numberFormat's suffix.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="id" type="xs:ID">
                                    <xs:annotation>
                                        <xs:documentation>An identifier for this element. The identifier must be unique
                                            within the document and is required only when another element must reference
                                            this one.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="scientific" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether to use scientific notation.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="minimumFractionDigits" type="xs:nonNegativeInteger">
                        <xs:annotation>
                            <xs:documentation>Minimum number of digits to display in the fractional part of a decimal or
                                scientific representation.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="maximumFractionDigits" type="xs:nonNegativeInteger">
                        <xs:annotation>
                            <xs:documentation>Maximum number of digits to display in the fractional part of a decimal or
                                scientific representation.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="minimumIntegerDigits" type="xs:nonNegativeInteger">
                        <xs:annotation>
                            <xs:documentation>Minimum number of digits to display in the integer part of a decimal
                                representation.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="maximumIntegerDigits" type="xs:nonNegativeInteger">
                        <xs:annotation>
                            <xs:documentation>Maximum number of digits to display in the integer part of a decimal
                                representation.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="useGrouping" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, grouping characters will be inserted for large integer values, so
                                that 1000000 would be shown as 1,000,000.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="hideNegatives" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, negative values are shown as their absolute
                                values.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="negativesOutside" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, negative sign or parentheses will be shown outside the
                                prefix/suffix.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="scalingFactor" type="xs:double">
                        <xs:annotation>
                            <xs:documentation>A number which will be divided into the data before formatting. A typical
                                use would be to specify scalingFactor="1000000" and suffix="millions" or
                                scalingFactor="0.001" and suffix="millis".
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="negativesInParentheses" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, negative values will be indicated by parentheses rather than the
                                negative sign.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="relabel">
        <xs:annotation>
            <xs:documentation>For display purposes only, maps a value of the variable to a new display
                value.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="from" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>The real variable value that is mapped to a label.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="to" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>Label to use for display instead of the real value.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="rotation">
        <xs:annotation>
            <xs:documentation>Maps a variable to an angle at which to rotate a symbol.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:attribute name="missing">
                        <xs:annotation>
                            <xs:documentation>The angle to use when the value is missing.</xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minInclusive value="0"/>
                                <xs:maxInclusive value="360"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="low">
                        <xs:annotation>
                            <xs:documentation>The lowest value in the domain of the variable is mapped to this
                                angle.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minInclusive value="0"/>
                                <xs:maxInclusive value="360"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="high">
                        <xs:annotation>
                            <xs:documentation>The maximum value in the domain of the variable is mapped to this
                                angle.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minInclusive value="0"/>
                                <xs:maxInclusive value="360"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="scale">
        <xs:annotation>
            <xs:documentation>A transform of the data to re-scale it using a specified method.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="method" use="required">
                <xs:annotation>
                    <xs:documentation>What sort of transformation to perform.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="linear">
                            <xs:annotation>
                                <xs:documentation>Simple linear scale.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="log">
                            <xs:annotation>
                                <xs:documentation>Log scale, resulting in ticks like 1, 10, 100, 1000, and so on. A
                                    numeric parameter "base" may be used to change the base from the default
                                    "10".
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="power">
                            <xs:annotation>
                                <xs:documentation>A power scale. The exponent should be set in a parameter to a positive
                                    value.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="log.safe">
                            <xs:annotation>
                                <xs:documentation>A transformation y = SIGN(x) LOG(1 + ABS(x)) that is defined for all
                                    values of x, maps 0 to 0, and preserves the sign of the original
                                    data.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="power.safe">
                            <xs:annotation>
                                <xs:documentation>A transformation y = SIGN(x) POWER(ABS(x), EXPONENT) that is defined
                                    for all values of x, maps 0 to 0, and preserves the sign of the original
                                    data.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="logit">
                            <xs:annotation>
                                <xs:documentation>A transformation y = LOG(x/(1-x)).</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="probit">
                            <xs:annotation>
                                <xs:documentation>A transformation y = INVERSE_GAUSSIAN(x), where gaussian is the
                                    statistical function based on the normal distribution function.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="asn">
                            <xs:annotation>
                                <xs:documentation>A transformation y = 2*ASIN(SQRT(x)).</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="atanh">
                            <xs:annotation>
                                <xs:documentation>A transformation y = ATANH(x).</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="prob">
                            <xs:annotation>
                                <xs:documentation>A probability scale. Use the distribution attribute to control which
                                    distribution to use, and the distributionParameter and distributionParameter2
                                    attributes to parameterize that distribution.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="invert" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Whether to invert the scale (for example, to change the direction of the scale
                        from right to left instead of left to right).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="origin" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The origin of a scale. This is particularly important to define for dates that do
                        not have good default date origins.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="base" type="xs:double">
                <xs:annotation>
                    <xs:documentation>The base for a log transform or the exponent for a power
                        transform.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="distribution" type="vis:distributionType">
                <xs:annotation>
                    <xs:documentation>The distribution to use with a probability scale.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="distributionParameter" type="xs:double">
                <xs:annotation>
                    <xs:documentation>A parameter for a distribution. If a distribution parameter is used, it is
                        documented with the specific type.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="distributionParameter2" type="xs:double">
                <xs:annotation>
                    <xs:documentation>A parameter for a distribution. If a distribution parameter is used, it is
                        documented with the specific type.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="size">
        <xs:annotation>
            <xs:documentation>Maps a variable to the size of the graphic item.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:lengthMapping" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attributeGroup ref="vis:aestheticRangeLengths"/>
                    <xs:attribute name="type" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The way in which size is varied.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="cycle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The cycle that will be applied to categorical data. The sizes will
                                be extracted from the style cycle and used for each distinct category in the data in
                                order
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>

                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="stringFormat">
        <xs:annotation>
            <xs:documentation>A format for a string value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:formatType">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:relabel"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="style">
        <xs:annotation>
            <xs:documentation>A cascading style sheet-like definition of a style to control drawing details
                such as colors, line widths, fonts, pattern and transparency.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="vis:style" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="vis:extension" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="gradient-method">
                <xs:annotation>
                    <xs:documentation>If a gradient color is set, this allows either a radial or linear gradient to be
                        used to fill the target.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="linear">
                            <xs:annotation>
                                <xs:documentation>A linear gradient.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="radial">
                            <xs:annotation>
                                <xs:documentation>A radial gradient (outward from a point).</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="gradient-color" type="xs:string">
                <xs:annotation>
                    <xs:documentation>If set, a gradient is drawn across the target using the 'color' and this
                        color.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="gradient-focus" type="xs:double">
                <xs:annotation>
                    <xs:documentation>A value between -1 and 1 indicating where the center of the gradient should
                        be.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="gradient-angle" type="xs:double">
                <xs:annotation>
                    <xs:documentation>For linear gradients, the angle of the gradient from
                        horizontal.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="gradient-size" type="xs:double">
                <xs:annotation>
                    <xs:documentation>For radial gradients. the size of the radius for the gradient, which is a value
                        between 0 and 1.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="gradient-opacity">
                <xs:annotation>
                    <xs:documentation>The opacity of the gradient.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0"/>
                        <xs:maxInclusive value="1"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="gradient-isInverted" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Invert the colors of the gradient, swapping 'color' and
                        'gradient-color'.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="shadow-color" type="xs:string">
                <xs:annotation>
                    <xs:documentation>If set, a shadow of this color will be drawn under the target.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="shadow-opacity">
                <xs:annotation>
                    <xs:documentation>The opacity of the shadow.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0"/>
                        <xs:maxInclusive value="1"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="shadow-dx" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Offset in horizontal direction (as a length, this defaults to pixels if no unit is
                        specified).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="shadow-dy" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Offset in vertical direction (as a length, this defaults to pixels if no unit is
                        specified).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="glyph-angle" type="xs:double">
                <xs:annotation>
                    <xs:documentation>If a symbol is used for the target, rotate it by this amount in
                        degrees.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="glyph-aspect">
                <xs:annotation>
                    <xs:documentation>If a symbol is used for the target, set its aspect ratio to this
                        value
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="color2" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The secondary color. Used for the exterior color for shapes that have exterior,
                        and for items like the median lines in schemas.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="hue2" type="xs:double">
                <xs:annotation>
                    <xs:documentation>The secondary hue (overrides color2).</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="saturation2" type="xs:double">
                <xs:annotation>
                    <xs:documentation>The secondary saturation (overrides color2).</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="brightness2" type="xs:double">
                <xs:annotation>
                    <xs:documentation>The secondary brightness (overrides color2).</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="opacity2">
                <xs:annotation>
                    <xs:documentation>The opacity of the secondary color.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0"/>
                        <xs:maxInclusive value="1"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="pattern">
                <xs:annotation>
                    <xs:documentation>Index of a pattern to fill the target with. Pattern 0, which is a solid fill, is
                        the default.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:int">
                        <xs:minInclusive value="0"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="background-method">
                <xs:annotation>
                    <xs:documentation>If there is a background image, this defines how to fit it in the
                        shape.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="tile">
                            <xs:annotation>
                                <xs:documentation>Tile the image across the target.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="stretch">
                            <xs:annotation>
                                <xs:documentation>Stretch the image to fill the target and do not preserve the aspect
                                    ratio.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="zoom">
                            <xs:annotation>
                                <xs:documentation>Zoom the image to fill the target and preserve the aspect
                                    ratio.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="center">
                            <xs:annotation>
                                <xs:documentation>Place a single copy of the image in the center of the
                                    target.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="background-image" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Define a location for an image to use. May be a file path, a path relative to the
                        top level of a jar file, or a URL.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="margin" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Amount of space to leave between the target and neighboring shapes. "Neighboring"
                        is defined differently for different targets.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="margin-left" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Overrides the generic margin value for one direction.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="margin-right" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Overrides the generic margin value for one direction.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="margin-top" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Overrides the generic margin value for one direction.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="margin-bottom" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Overrides the generic margin value for one direction.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="padding" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Amount of space to leave between this target and items inside
                        it.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="padding-left" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Overrides the generic padding value for one direction.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="padding-right" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Overrides the generic padding value for one direction.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="padding-top" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Overrides the generic padding value for one direction.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="padding-bottom" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Overrides the generic padding value for one direction.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="color" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The primary color.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="opacity" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The primary opacity (overrides color).</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="hue" type="xs:double">
                <xs:annotation>
                    <xs:documentation>The primary hue (overrides color).</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="saturation" type="xs:double">
                <xs:annotation>
                    <xs:documentation>The primary saturation (overrides color).</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="brightness" type="xs:double">
                <xs:annotation>
                    <xs:documentation>The primary brightness (overrides color).</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="stroke-dasharray" type="xs:string">
                <xs:annotation>
                    <xs:documentation>A semicolon-delimited list of lengths to use for the stroke dashing. Percentages
                        are relative to the stroke width.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="stroke-width" type="vis:length">
                <xs:annotation>
                    <xs:documentation>The width of the stroke for drawing the shape.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="stroke-decoration">
                <xs:annotation>
                    <xs:documentation>Draw the target with a decorative edging.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="etchLowered">
                            <xs:annotation>
                                <xs:documentation>Etch the shape with a 'lowered' etch look.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="etchRaised">
                            <xs:annotation>
                                <xs:documentation>Etch the shape with a 'raised' etch look.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="bevel">
                            <xs:annotation>
                                <xs:documentation>Put a bevel on the shape.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="size" type="vis:length">
                <xs:annotation>
                    <xs:documentation>The size of the symbol, line, or other shape to be drawn. This is not the size of
                        text; use the font-size attribute for that.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="symbol">
                <xs:annotation>
                    <xs:documentation>Which symbol to draw for the shape. Valid values include circle, square, line,
                        arrow, polygon, star, and flower.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string"/>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="glyph-sides">
                <xs:annotation>
                    <xs:documentation>Number of sides for a symbol that can have different numbers of sides (star,
                        polygon, flower).
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:int">
                        <xs:minInclusive value="2"/>
                        <xs:maxInclusive value="100"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="font-family" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Name of the font family to use.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="font-size" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Size of font.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="font-style">
                <xs:annotation>
                    <xs:documentation>Font face.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="regular">
                            <xs:annotation>
                                <xs:documentation>Not italic.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="italic">
                            <xs:annotation>
                                <xs:documentation>Italic.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="font-weight">
                <xs:annotation>
                    <xs:documentation>Use bold font or normal weight font.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="regular">
                            <xs:annotation>
                                <xs:documentation>Normal weight.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="bold">
                            <xs:annotation>
                                <xs:documentation>Heavy weight.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="bevel-size" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Width of bevel with which to draw the item.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="depth" type="vis:length">
                <xs:annotation>
                    <xs:documentation>Size of the extruded shape for such shapes in 3D.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="depthRelativeToWidth" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, the depth is proportional to the width for extruded shapes in
                        3D.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="stroke-linecap">
                <xs:annotation>
                    <xs:documentation>The method to use to join and end lines.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="round">
                            <xs:annotation>
                                <xs:documentation>Use rounded joins with circular caps protruding past the start and end
                                    points.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="square">
                            <xs:annotation>
                                <xs:documentation>Use mitered joins with square caps protruding past the start and end
                                    points.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="butt">
                            <xs:annotation>
                                <xs:documentation>Use mitered joins with square caps butting up to the start and end
                                    points.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="labelAngle" type="xs:double">
                <xs:annotation>
                    <xs:documentation>For labels, the angle at which to draw them in degrees.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="labelInside" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, labels are placed inside the target. If false, outside the
                        target.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="labelLocationHorizontal">
                <xs:annotation>
                    <xs:documentation>The label placement relative to the target in the 'horizontal' direction. Under
                        coordinate transforms, this may not actually be the horizontal direction, but the 'transformed
                        horizontal'.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:pattern value="center">
                            <xs:annotation>
                                <xs:documentation>Label is centered on the target.</xs:documentation>
                            </xs:annotation>
                        </xs:pattern>
                        <xs:pattern value="positive">
                            <xs:annotation>
                                <xs:documentation>Label is placed right of or below the target.</xs:documentation>
                            </xs:annotation>
                        </xs:pattern>
                        <xs:pattern value="negative">
                            <xs:annotation>
                                <xs:documentation>Label is placed left or above the target.</xs:documentation>
                            </xs:annotation>
                        </xs:pattern>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="labelLocationVertical">
                <xs:annotation>
                    <xs:documentation>The label placement relative to the target in the 'vertical' direction. Under
                        coordinate transforms, this may not actually be the vertical direction, but the 'transformed
                        vertical'.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:pattern value="center">
                            <xs:annotation>
                                <xs:documentation>Label is centered on the target.</xs:documentation>
                            </xs:annotation>
                        </xs:pattern>
                        <xs:pattern value="positive">
                            <xs:annotation>
                                <xs:documentation>Label is placed right of or below the target.</xs:documentation>
                            </xs:annotation>
                        </xs:pattern>
                        <xs:pattern value="negative">
                            <xs:annotation>
                                <xs:documentation>Label is placed left or above the target.</xs:documentation>
                            </xs:annotation>
                        </xs:pattern>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="textAlignment">
                <xs:annotation>
                    <xs:documentation>Alignment of text within space allowed for it.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="left">
                            <xs:annotation>
                                <xs:documentation>Align text on the left.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="right">
                            <xs:annotation>
                                <xs:documentation>Align text on the right.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="center">
                            <xs:annotation>
                                <xs:documentation>Align text in the center.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="ignoreNewLines" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, newlines in text are replaced by spaces.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="twoCharacterVertical" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, for CJK text that is drawn vertically, roman characters are drawn in
                        pairs with regular orientation. If false, roman text is drawn rotated within the vertical strip
                        for the CJK text.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="baselineRotated" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, all text (Roman and CJK) is drawn in normal orientation, stacked on top
                        of each other.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="maxAttachedTextWidth" type="vis:length">
                <xs:annotation>
                    <xs:documentation>For text that is attached on the outside of a target, this is the maximum size it
                        can extend horizontally.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="maxAttachedTextHeight" type="vis:length">
                <xs:annotation>
                    <xs:documentation>For text that is attached on the outside of a target, this is the maximum size it
                        can extend vertically.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="visible" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If false, the target is hidden.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="vis:length">
                <xs:annotation>
                    <xs:documentation>The width of an element (a line or bar or such). If not set, the 'size' value is
                        used instead.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="text-fit" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, the text autofits, shrinking down if necessary to fit in the
                        space.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="fill" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The color used to fill a shape. This is deprecated; the color attribute should be
                        used instead.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="stroke" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The color used to draw the edges of a shape. This is deprecated; the color or
                        color2 attributes should be used instead.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="fill-opacity" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The opacity used to fill a shape. This is deprecated; the opacity attribute should
                        be used instead.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="stroke-opacity" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The opacity used to draw a shape's edges. This is deprecated; the opacity or
                        opacity2 attributes should be used instead.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="border-left" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Sets whether a left border is shown.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="border-right" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Sets whether a right border is shown.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="border-top" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Sets whether a top border is shown.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="border-bottom" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Sets whether a bottom border is shown.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="dash">
        <xs:annotation>
            <xs:documentation>A mapping from a categorical variable to a set of dash styles.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:dashMapping" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="missing" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>A dash pattern (semicolon separated list of lengths) to map missing
                                values to
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="cycle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The cycle that will be applied to categorical data. The patterns will
                                be extracted from the style cycle and used for each distinct category in the data in
                                order
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>

                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="shape">
        <xs:annotation>
            <xs:documentation>Maps a categorical variable to a set of glyph shapes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:symbolMapping" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="missing" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The shape to display missing values as.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="cycle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The cycle that will be applied to categorical data. The shapes will
                                be extracted from the style cycle and used for each distinct category in the data in
                                order
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>

                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="labelLocation">
        <xs:annotation>
            <xs:documentation>If specified, determines the location of a labeling element along one dimension within the
                data area. The variable is used to map into continuous space based on the domain. The intent of this
                feature is to allow labels to be moved anywhere in the data display area.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:attribute name="role">
                        <xs:annotation>
                            <xs:documentation>The dimension to which to map a variable.</xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:NMTOKEN">
                                <xs:pattern value="x"/>
                                <xs:pattern value="y"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="styleBy">
        <xs:annotation>
            <xs:documentation>Map a categorical variable to a set of discrete styles for graphic
                items.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:attribute name="missing" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>Use this style for missing values.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="styleCycle" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>A cycle of styles to use for categories of data. If undefined, a
                                default cycle will be used, based on the type of graphic element being
                                displayed.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="affects" type="xs:NMTOKEN">
                        <xs:annotation>
                            <xs:documentation>The name of the style attribute to be affected by the styleBy. If not
                                specified, the main style will be affected.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="transparency">
        <xs:annotation>
            <xs:documentation>Maps a variable to the transparency (1-opacity) of the graphic item.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="vis:doubleMapping" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attributeGroup ref="vis:aestheticRangeZeroOne"/>
                    <xs:attribute name="affect" type="vis:colorAffectType" default="fill">
                        <xs:annotation>
                            <xs:documentation>Type of color affected. Fill colors are for the interior of a drawn object
                                while a stroke color is for the edge of the drawn object. Note that some objects, such
                                as lines do not have an interior. "main" is usually a fill color. "secondary" is usually
                                a stroke color. "both" affects both. "fill" is explicitly a fill color. "main" or
                                "secondary" should be used instead. "stroke" is explicitly a stroke color. "main" or
                                "secondary" should be used instead.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="position" type="vis:coordinate">
        <xs:annotation>
            <xs:documentation>Determines location along an axis. A generic form of 'x', 'y' and 'z' positional
                elements.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="x" type="vis:coordinate">
        <xs:annotation>
            <xs:documentation>Determines location along the x (horizontal) axis.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="y" type="vis:coordinate">
        <xs:annotation>
            <xs:documentation>Determines location along the y (vertical) axis.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="z" type="vis:coordinate">
        <xs:annotation>
            <xs:documentation>Determines location along the z (front-back) axis. High Z is towards the front and low Z
                is to the back.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:attributeGroup name="aestheticDataAttributes">
        <xs:annotation>
            <xs:documentation>Data is taken from the variable.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="variable" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>The aesthetic uses data from this variable to map to the graphical
                    characteristic.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dimension" type="xs:nonNegativeInteger" default="0">
            <xs:annotation>
                <xs:documentation>If the variable is an expression that contains more than one dimension of data (for
                    example, the expression contained a cross of other variables), then this attribute specifies which
                    of the variable's dimensions to use. The first is numbered 0, then 1, 2, etc.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="domain" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>If specified, this domain will be used to define the domain of the variable rather
                    than the variable's default domain. For example, a user might choose to map 0 to black and 1 to
                    white even if the data only run from 0.3 to 0.7. In this case a domain of [0,1] would be specified
                    for the aesthetic.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="clamp" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, values off the edges of the domain will be pegged to low or high values, not
                    ignored.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="split" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, distinct values of the variable will have statistics computed on them
                    independently.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="aestheticRangeLengths">
        <xs:annotation>
            <xs:documentation>Defines the output range of an aesthetic in terms of lengths.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="missing" type="vis:length">
            <xs:annotation>
                <xs:documentation>Missing values for the aesthetic variable will be mapped to this
                    length.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="low" type="vis:length">
            <xs:annotation>
                <xs:documentation>The lowest value in the domain for the aesthetic variable will be mapped to this
                    length.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="high" type="vis:length">
            <xs:annotation>
                <xs:documentation>The maximum value in an aesthetic variable's data will be mapped to this
                    length.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="aestheticRangeZeroOne">
        <xs:annotation>
            <xs:documentation>Defines the output range of the aesthetic between 0 and 1.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="missing">
            <xs:annotation>
                <xs:documentation>Missing values in the domain of the aesthetic are mapped to this number. 0 represents
                    the lowest number the aesthetic could support and 1 represents the highest. For example, for
                    brightness, 0 represents completely dark and 1 represents completely white.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:double">
                    <xs:minInclusive value="0"/>
                    <xs:maxInclusive value="1"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="low">
            <xs:annotation>
                <xs:documentation>The lowest value in the domain of the aesthetic is mapped to this number. 0 represents
                    the lowest number the aesthetic could support and 1 represents the highest. For example, for
                    brightness, 0 represents completely dark and 1 represents completely white.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:double">
                    <xs:minInclusive value="0"/>
                    <xs:maxInclusive value="1"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="high">
            <xs:annotation>
                <xs:documentation>The highest value in the domain of the aesthetic is mapped to this number. 0
                    represents the lowest number the aesthetic could support and 1 represents the highest. For example,
                    for brightness, 0 represents completely dark and 1 represents completely white.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:double">
                    <xs:minInclusive value="0"/>
                    <xs:maxInclusive value="1"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:simpleType name="color">
        <xs:annotation>
            <xs:documentation>A concrete color definition, of the form #RRGGBB, or one of the standard web color
                names.
            </xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="vis:colorName vis:colorRGBformat"/>
    </xs:simpleType>
    <xs:element name="split">
        <xs:annotation>
            <xs:documentation>A pseudo-aesthetic that does not actually change graphic appearance, but simply splits the
                element into subgroups based on a categorical variable.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aesthetic"/>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="dimensionName">
        <xs:annotation>
            <xs:documentation>The name of a part of a coordinate system.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="x"/>
            <xs:enumeration value="y"/>
            <xs:enumeration value="z"/>
            <xs:enumeration value="theta"/>
            <xs:enumeration value="r"/>
            <xs:enumeration value="phi"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="length">
        <xs:annotation>
            <xs:documentation>A length consists of either a single length attribute, or a set of three separated by
                semicolons, in which case the value is pegged to lie between the second (min value) and third (max
                value). A length attribute is a number followed by an optional unit -
                %,px,in,cm,mm,pt,pc
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="locationMethodType">
        <xs:annotation>
            <xs:documentation>Defines how a location element will determine the size of its parent
                frame.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="fixed">
                <xs:annotation>
                    <xs:documentation>Use a fixed value for the location. This can be an absolute or percentage
                        value.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="sizeToContent">
                <xs:annotation>
                    <xs:documentation>Size to fit the contents of the parent frame. This can be used for 'width' and
                        'height' location parts.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="same">
                <xs:annotation>
                    <xs:documentation>Use the same value as that used for a referenced frame.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="attach">
                <xs:annotation>
                    <xs:documentation>Use the same value as that used for the opposite side of a referenced
                        frame.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="locationPartType">
        <xs:annotation>
            <xs:documentation>Defines which aspect of a frame location is to be defined by a
                location.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="left"/>
            <xs:enumeration value="right"/>
            <xs:enumeration value="top"/>
            <xs:enumeration value="bottom"/>
            <xs:enumeration value="width"/>
            <xs:enumeration value="height"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="colorRGBformat">
        <xs:annotation>
            <xs:documentation>A color expressed as #RRGGBB.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="#[A-F,a-f,0-9]{6}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="colorName">
        <xs:annotation>
            <xs:documentation>A named Color such as "red" or "lightGray".</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[A-Za-z]+"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:element name="sourceVariable">
        <xs:annotation>
            <xs:documentation>Variables are used to construct visualizations and are defined in terms of source data.
                They are the link that defines how a column of data is used in the chart.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:variableType">
                    <xs:attribute name="sourceName" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The name of this variable as it is identified in the
                                source.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="inputDateFormatPattern" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The date input format pattern to use when reading this variable (for
                                example, M/dd/yy).
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="inputTimeZone" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The date input time zone to use when reading this
                                variable.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="categoricalDomain">
        <xs:annotation>
            <xs:documentation>A domain defines the range of values in which data are expected to lie. The domain can be
                used to exclude values you do not want and to define standard ranges so data with different empirical
                ranges can be compared.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:domainType">
                    <xs:sequence>
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                            <xs:element ref="vis:variableReference"/>
                            <xs:element ref="vis:domainReference"/>
                            <xs:element ref="vis:categories"/>
                        </xs:choice>
                        <xs:choice minOccurs="0">
                            <xs:element name="statisticSort">
                                <xs:annotation>
                                    <xs:documentation>Sorts categories according to a statistic calculated on a
                                        continuous variable for rows with each category.
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:complexContent>
                                        <xs:extension base="vis:sortType">
                                            <xs:attribute name="sourceVariable" type="xs:IDREF" use="required">
                                                <xs:annotation>
                                                    <xs:documentation>The variable that contains categories for sorting.
                                                        Categories not present are to one end of the
                                                        list.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="statVariable" type="xs:IDREF">
                                                <xs:annotation>
                                                    <xs:documentation>The continuous variable on which the statistic is
                                                        calculated for each category in the categorical
                                                        variable.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="method" type="vis:summaryType">
                                                <xs:annotation>
                                                    <xs:documentation>The summary method.</xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                        </xs:extension>
                                    </xs:complexContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="simpleSort">
                                <xs:annotation>
                                    <xs:documentation>Sorts data either by occurrence or
                                        alphanumerically.
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:complexContent>
                                        <xs:extension base="vis:sortType">
                                            <xs:sequence>
                                                <xs:element name="categoryOrder" type="xs:string" minOccurs="0">
                                                    <xs:annotation>
                                                        <xs:documentation>A semicolon-separated list of the categories
                                                            in the desired order.
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:element>
                                            </xs:sequence>
                                            <xs:attribute name="method">
                                                <xs:annotation>
                                                    <xs:documentation>The sort method to use.</xs:documentation>
                                                </xs:annotation>
                                                <xs:simpleType>
                                                    <xs:restriction base="xs:string">
                                                        <xs:enumeration value="data">
                                                            <xs:annotation>
                                                                <xs:documentation>Sort the data values in the order they
                                                                    are encountered.
                                                                </xs:documentation>
                                                            </xs:annotation>
                                                        </xs:enumeration>
                                                        <xs:enumeration value="custom">
                                                            <xs:annotation>
                                                                <xs:documentation>Sort the data values in the order that
                                                                    the user specifies using the categoryOrder
                                                                    element.
                                                                </xs:documentation>
                                                            </xs:annotation>
                                                        </xs:enumeration>
                                                        <xs:enumeration value="natural">
                                                            <xs:annotation>
                                                                <xs:documentation>Sort the data values in natural order
                                                                    (e.g., alphabetical or numeric).
                                                                </xs:documentation>
                                                            </xs:annotation>
                                                        </xs:enumeration>
                                                        <xs:enumeration value="naturalUsingLabel">
                                                            <xs:annotation>
                                                                <xs:documentation>Sort the data values in natural order
                                                                    using their labels.
                                                                </xs:documentation>
                                                            </xs:annotation>
                                                        </xs:enumeration>
                                                    </xs:restriction>
                                                </xs:simpleType>
                                            </xs:attribute>
                                        </xs:extension>
                                    </xs:complexContent>
                                </xs:complexType>
                            </xs:element>
                        </xs:choice>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="intervalDomain">
        <xs:annotation>
            <xs:documentation>A domain defines the range of values in which data is expected to lie. The domain can be
                used to exclude values you do not want and to define standard ranges so data with different empirical
                ranges can be compared. The interval domain is used for continuous values.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:domainType">
                    <xs:choice minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>Domains, variables, and ranges to include in this
                                domain.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:element ref="vis:variableReference"/>
                        <xs:element ref="vis:domainReference"/>
                        <xs:element name="range">
                            <xs:annotation>
                                <xs:documentation>An interval to add to the domain or to reduce the
                                    domain.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:attribute name="min" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>The minimum value for this interval.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="max" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>The maximum value for this interval.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="exact" type="xs:boolean">
                                    <xs:annotation>
                                        <xs:documentation>Whether to force exact interval values.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                    </xs:choice>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="styleCycle">
        <xs:annotation>
            <xs:documentation>Styles that can be used by a styleBy aesthetic.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:sequence>
                    <xs:element name="cycle" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>When getting the first style from a styleCycle, the first styles from each
                                cycle are combined. The second style consists of the second style from the first cycle
                                combined with the others and so on until that cycle is exhausted. Then the first cycle
                                resets to the first style and the second style from the second cycle is used. This means
                                that, for example, a styleCycle with four cycles each containing three styles can
                                generate 81 styles before wrapping.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element ref="vis:style" maxOccurs="unbounded"/>
                            </xs:sequence>
                            <xs:attribute name="id" type="xs:ID">
                                <xs:annotation>
                                    <xs:documentation>An identifier for this element. The identifier must be unique
                                        within the document and is required only when another element must reference
                                        this one.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:element ref="vis:extension" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="dateOrNumber">
        <xs:annotation>
            <xs:documentation>A date or a number.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="vis:date xs:double"/>
    </xs:simpleType>
    <xs:simpleType name="date">
        <xs:annotation>
            <xs:documentation>One of the three legal ways to represent a date.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="xs:date xs:time xs:dateTime"/>
    </xs:simpleType>
    <xs:complexType name="coordinate">
        <xs:annotation>
            <xs:documentation>A coordinate used to locate a graphic representation of data within a coordinate
                system.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="variable" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>This variable's data are used to locate graphic items created by the element within
                    the coordinate system.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="dot">
        <xs:annotation>
            <xs:documentation>The Grammar of Graphics dot operator takes multiple variables to make a facet with all
                combinations of each of the variables.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="vis:variableReference"/>
                <xs:element ref="vis:unity"/>
                <xs:element ref="vis:blend"/>
                <xs:element ref="vis:cross"/>
                <xs:element ref="vis:dot"/>
                <xs:element ref="vis:nest"/>
            </xs:choice>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="cross">
        <xs:annotation>
            <xs:documentation>The Grammar of Graphics cross operator takes multiple variables to make a facet with all
                combinations of each of the variables.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="vis:variableReference"/>
                <xs:element ref="vis:unity"/>
                <xs:element ref="vis:blend"/>
                <xs:element ref="vis:cross"/>
                <xs:element ref="vis:dot"/>
                <xs:element ref="vis:nest"/>
            </xs:choice>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="blend">
        <xs:annotation>
            <xs:documentation>The Grammar of Graphics blend operator takes variables and merges them on the same
                dimension.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="vis:variableReference"/>
                <xs:element ref="vis:unity"/>
                <xs:element ref="vis:blend"/>
                <xs:element ref="vis:cross"/>
                <xs:element ref="vis:dot"/>
                <xs:element ref="vis:nest"/>
            </xs:choice>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="unity">
        <xs:annotation>
            <xs:documentation>The Grammar of Graphics unity variable.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id">
                <xs:annotation>
                    <xs:documentation>Optional ID, which is not generally needed for this element.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="nest">
        <xs:annotation>
            <xs:documentation>The Grammar of Graphics nest operator takes two variables. The first is nested within the
                second on the same dimension.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="vis:variableReference"/>
                <xs:element ref="vis:unity"/>
                <xs:element ref="vis:blend"/>
                <xs:element ref="vis:cross"/>
                <xs:element ref="vis:nest"/>
                <xs:element ref="vis:dot"/>
            </xs:choice>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="extension">
        <xs:annotation>
            <xs:documentation>This element can be used as a simple way to store additional information in the ViZml
                without requiring an additional schema.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any processContents="skip"/>
            </xs:sequence>
            <xs:anyAttribute processContents="skip"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="improveLayout">
        <xs:annotation>
            <xs:documentation>This is a type that can be used to define an incremental improvement to a graph
                layout.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="ignoreLinkCrossings" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, link crossings are ignored. This is a faster option for graphs with many
                    edges.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="respectGroups" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, groups such as defined by layers of a tree or DAG are
                    respected.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxIterations" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Maximum number of iterations through which to run this algorithm.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxTime">
            <xs:annotation>
                <xs:documentation>Maximum amount of time (approximately) for which to run this
                    algorithm.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:double">
                    <xs:minExclusive value="0"/>
                    <xs:maxInclusive value="1000000"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="frame">
        <xs:annotation>
            <xs:documentation>A rectangular area of the total display space.</xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="vis:extension" minOccurs="0"/>
            <xs:element ref="vis:location" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>Identifier for this frame. The identifier must be unique within the document and is
                    required only when another element must reference this one. Can be used as the value for a target so
                    other frames can define their locations relative to this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="style" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>The frame is drawn with this style before any of its contents are
                    drawn.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="clip" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the frame clips contents so they do not overflow its bounds. The default
                    behavior may vary based on the contents of the frame.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:group name="aesthetic">
        <xs:annotation>
            <xs:documentation>A group with a choice of all the possible aesthetics.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="vis:visibility"/>
            <xs:element ref="vis:colorComponent"/>
            <xs:element ref="vis:color"/>
            <xs:element ref="vis:dash"/>
            <xs:element ref="vis:labeling"/>
            <xs:element ref="vis:offset"/>
            <xs:element ref="vis:pattern"/>
            <xs:element ref="vis:image"/>
            <xs:element ref="vis:rotation"/>
            <xs:element ref="vis:shape"/>
            <xs:element ref="vis:size"/>
            <xs:element ref="vis:split"/>
            <xs:element ref="vis:styleBy"/>
            <xs:element ref="vis:transparency"/>
        </xs:choice>
    </xs:group>
    <xs:group name="statistic">
        <xs:annotation>
            <xs:documentation>A group with a choice of all the possible statistics.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="vis:attach"/>
            <xs:element ref="vis:binStatistic"/>
            <xs:element ref="vis:aggregateStatistic"/>
            <xs:element ref="vis:collectRowsStatistic"/>
            <xs:element ref="vis:distributionStatistic"/>
            <xs:element ref="vis:graphLayoutStatistic"/>
            <xs:element ref="vis:linkStatistic"/>
            <xs:element ref="vis:mapStatistic"/>
            <xs:element ref="vis:regionStatistic"/>
            <xs:element ref="vis:smoothStatistic"/>
            <xs:element ref="vis:fixedWindowDensityStatistic"/>
            <xs:element ref="vis:nearestNeighborDensityStatistic"/>
            <xs:element ref="vis:summaryStatistic"/>
            <xs:element ref="vis:treeLayoutStatistic"/>
            <xs:element ref="vis:clusteringStatistic"/>
            <xs:element ref="vis:tukeyStatistic"/>
        </xs:choice>
    </xs:group>
    <xs:group name="format">
        <xs:annotation>
            <xs:documentation>A format for text, numbers, or dates for this domain.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="vis:stringFormat"/>
            <xs:element ref="vis:numberFormat"/>
            <xs:element ref="vis:dateTimeFormat"/>
            <xs:element ref="vis:elapsedTimeFormat"/>
        </xs:choice>
    </xs:group>
    <xs:group name="guide">
        <xs:annotation>
            <xs:documentation>Group of all the available guides.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="vis:frameGuide"/>
            <xs:element ref="vis:functionGuide"/>
            <xs:element ref="vis:lineGuide"/>
            <xs:element ref="vis:rectangleGuide"/>
            <xs:element ref="vis:planeGuide"/>
            <xs:element ref="vis:pointGuide"/>
        </xs:choice>
    </xs:group>
    <xs:group name="element">
        <xs:annotation>
            <xs:documentation>Group of all the available elements.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="vis:area"/>
            <xs:element ref="vis:interval"/>
            <xs:element ref="vis:line"/>
            <xs:element ref="vis:edge"/>
            <xs:element ref="vis:path"/>
            <xs:element ref="vis:point"/>
            <xs:element ref="vis:polygon"/>
            <xs:element ref="vis:schema"/>
        </xs:choice>
    </xs:group>
    <xs:group name="variable">
        <xs:annotation>
            <xs:documentation>Group of all the different variables.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="vis:derivedVariable"/>
            <xs:element ref="vis:expressionVariable"/>
            <xs:element ref="vis:sourceVariable"/>
        </xs:choice>
    </xs:group>
    <xs:group name="interaction">
        <xs:annotation>
            <xs:documentation>Group of all the elements for interaction.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="vis:animation"/>
            <xs:element ref="vis:popup"/>
            <xs:element ref="vis:drillDown"/>
            <xs:element ref="vis:brushing"/>
            <xs:element ref="vis:zooming"/>
            <xs:element ref="vis:lineGuideController"/>
            <xs:element ref="vis:rectangleGuideController"/>
            <xs:element ref="vis:filterController"/>
            <xs:element ref="vis:interactive3dRotation"/>
            <xs:element ref="vis:dragElement"/>
        </xs:choice>
    </xs:group>
    <xs:simpleType name="mappingMethod">
        <xs:annotation>
            <xs:documentation>Method to use to modify a domain to extend it to the next nearest nice
                number.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="nice">
                <xs:annotation>
                    <xs:documentation>Extend to the next nearest 'nice' number.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="exact">
                <xs:annotation>
                    <xs:documentation>Leave it exactly as defined by the domain.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="breakRepresentationType">
        <xs:annotation>
            <xs:documentation>How to represent a break in a boundary element (path, line, area).</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="gap">
                <xs:annotation>
                    <xs:documentation>Specifies that the graphic element ends at a valid value and does not continue
                        until the next valid value. There is a gap between valid values.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="interpolate">
                <xs:annotation>
                    <xs:documentation>Specifies that the graphic element is interpolated through missing values. That
                        is, the graphic element is continuous from one valid value to another, regardless of missing
                        values between the valid values.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="wings">
                <xs:annotation>
                    <xs:documentation>Specifies that the graphic element continues after a valid value in the direction
                        of the next valid value but then breaks just before and after the missing value. This is like
                        interpolating through the missing value and erasing the graphic element at the missing value.
                        For line charts, the result looks similar to wings.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="labelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="descriptionGroup">
                <xs:annotation>
                    <xs:documentation>A target XML element that is used to generate text to be inserted in the label. A
                        mix of text and description elements is allowed and typically used.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:choice minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="description">
                            <xs:annotation>
                                <xs:documentation>A short piece of text acquired from an item that describes one feature
                                    of that item.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:sequence minOccurs="0">
                                    <xs:group ref="vis:format"/>
                                </xs:sequence>
                                <xs:attribute name="name" type="xs:string" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The name of the description requested from the target XML
                                            element. This might be as simple as "name" or more complex such as
                                            "r-squared". Different XML elements provide different possible
                                            descriptions.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="id" type="xs:ID">
                                    <xs:annotation>
                                        <xs:documentation>An identifier for this element. The identifier must be unique
                                            within the document and is required only when another element must reference
                                            this one.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="text" type="vis:textType">
                            <xs:annotation>
                                <xs:documentation>A fixed string of text.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:choice>
                    <xs:attribute name="target" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>The ID of the item for which a description is required.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="separator" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>If the targeted item has multiple groups, their descriptions are separated
                                by this string.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="id" type="xs:ID">
                        <xs:annotation>
                            <xs:documentation>An identifier for this element. The identifier must be unique within the
                                document and is required only when another element must reference this
                                one.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
            <xs:element name="text" type="vis:textType">
                <xs:annotation>
                    <xs:documentation>A fixed string of text.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element ref="vis:alternateLabel"/>
        </xs:choice>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="style" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>The style for the text of the label.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="textFrameStyle" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>The style for the frame around the text.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="zOrder" type="xs:int">
            <xs:annotation>
                <xs:documentation>Integer that determines the order in which items are drawn. If this is not specified,
                    items are drawn in the order they are found in the specification.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="elementType">
        <xs:sequence>
            <xs:element ref="vis:extension" minOccurs="0"/>
            <xs:element ref="vis:conditionalStyle" minOccurs="0" maxOccurs="unbounded"/>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>A sequence of statistics defines as chain; each statistic is applied to the
                        results of the previous statistic. A common use is binning followed by a
                        summary.
                    </xs:documentation>
                </xs:annotation>
                <xs:group ref="vis:statistic"/>
            </xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>A sequence of aesthetics is applied in order; later aesthetics might override the
                        values set by previous aesthetics.
                    </xs:documentation>
                </xs:annotation>
                <xs:group ref="vis:aesthetic"/>
            </xs:choice>
            <xs:element ref="vis:position" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="vis:x" minOccurs="0"/>
            <xs:element ref="vis:y" minOccurs="0"/>
            <xs:element ref="vis:z" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="clip">
            <xs:annotation>
                <xs:documentation>The type of clipping to apply to the element.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="none">
                        <xs:annotation>
                            <xs:documentation>Do not clip at all.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>

                    <xs:enumeration value="cell">
                        <xs:annotation>
                            <xs:documentation>Clip to the cell such that the glyph being clipped does not go outside of
                                the cell of the graph.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>

                    <xs:enumeration value="domain">
                        <xs:annotation>
                            <xs:documentation>Clip to the domain. Do not let the bounds of the glyph exceed the
                                domain.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>

                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="style" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>The basic style of this element.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="name" type="xs:string">
            <xs:annotation>
                <xs:documentation>A human-readable string that may be used to name the element in a legend or to be read
                    by a screen reader. If not defined, the ID will be used instead.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dot" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Usually an element's expression is crossed with the faceting, so that blends in the
                    faceting will induce multiple copies of the data in the graph. If this parameter is set to true, the
                    expressions will be dotted together, making fewer copies.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="labelCollisionHandling">
            <xs:annotation>
                <xs:documentation>Allows the use of one or more algorithms to avoid collision among labels by moving
                    them slightly around their original positions.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="none">
                        <xs:annotation>
                            <xs:documentation>Labels will not be moved.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="normal">
                        <xs:annotation>
                            <xs:documentation>Labels will be moved so as to avoid collisions. A short amount of time
                                will be allocated to this algorithm.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="fast">
                        <xs:annotation>
                            <xs:documentation>Labels will be moved so as to avoid collisions. A very short amount of
                                time will be allocated to this algorithm; effectively it will not attempt many
                                changes.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="quality">
                        <xs:annotation>
                            <xs:documentation>Labels will be moved so as to avoid collisions. A long amount of time will
                                be allocated to this algorithm; possibly up to a half second or so.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="extreme">
                        <xs:annotation>
                            <xs:documentation>Labels will be moved so as to avoid collisions. The process will be
                                allowed to run for a very long period of time; many seconds or so are possible. This
                                option should only be used when time is not important.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="outside">
                        <xs:annotation>
                            <xs:documentation>Labels will be moved so as to radiate outwards from the center of the
                                cell.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="inside">
                        <xs:annotation>
                            <xs:documentation>Labels will be moved so as to radiate inwards from the center of the
                                cell.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="basic">
                        <xs:annotation>
                            <xs:documentation>Labels will be moved so as to avoid collisions. The process will be
                                allowed to run for a very long period of time; many seconds or so are possible. This
                                option should only be used when time is not important.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="showCollidingLabels" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If no label collision handling is attempted, or if labels still collide afterwards,
                    this parameter specifies whether a label will be drawn if it collides with a previously drawn
                    label.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="coordinates" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>Defines the coordinate system within which an element is drawn. If left undefined, the
                    first coordinate system defined by the graph is used. This attribute is intended for only graphs
                    with multiple coordinate systems, such as SPLOMs with histograms on the diagonal.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="positionModifier">
            <xs:annotation>
                <xs:documentation>For elements that would be mapped to the same position, this attribute allows them to
                    be stacked on top of each other, dodged to either side of each other, or have the intersection of
                    their ranges removed form each of them (a difference effect).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="center">
                        <xs:annotation>
                            <xs:documentation>Intervals that are centered will be moved around the center of the
                                dimension
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="stack">
                        <xs:annotation>
                            <xs:documentation>Elements that are split by a splitting aesthetic will be stacked on top of
                                each other.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="stackInterpolating">
                        <xs:annotation>
                            <xs:documentation>
                                If items have the same coordinates except possibly for the response dimension, stack
                                them on top of each other. If a value is missing at a given stack location, a linear
                                interpolation will be performed to give it a value.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="setMissingsToZero">
                        <xs:annotation>
                            <xs:documentation>A simple modifier that converts all missing values to
                                zeros.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="minusIntersection">
                        <xs:annotation>
                            <xs:documentation>
                                Areas drawn with this modifier are subtracted from each other to create a 'difference
                                area'. Although defined in terms of areas, and intended mainly for use in that element,
                                it will work for all elements.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="dodge">
                        <xs:annotation>
                            <xs:documentation>
                                Items drawn at exactly the same location will be moved aside so they no longer occlude
                                each other. The center of the set of moved items will be the same location as they
                                originally occupied. This is used to create symmetric dot plots.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="pile">
                        <xs:annotation>
                            <xs:documentation>
                                Items drawn at exactly the same location will be moved aside so they no longer occlude
                                each other. Instead of being centered at the original location as in 'dodge', they will
                                be piled one on top of each other. This is used to create asymmetric dot plots.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="jitterJointUniform">
                        <xs:annotation>
                            <xs:documentation>
                                All elements are perturbed randomly along all dimensions using a uniform distribution.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="jitterConditionalUniform">
                        <xs:annotation>
                            <xs:documentation>
                                All elements are perturbed randomly on the dependent dimension using a uniform
                                distribution.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="jitterJointNormal">
                        <xs:annotation>
                            <xs:documentation>
                                All elements are perturbed randomly along all dimensions using a normal distribution.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="jitterConditionalNormal">
                        <xs:annotation>
                            <xs:documentation>
                                All elements are perturbed randomly on the dependent dimension using a normal
                                distribution.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="xLocation" type="xs:double">
            <xs:annotation>
                <xs:documentation>Sets the x location to a value in [0,1] coordinates. Overrides position and statistic
                    values.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="yLocation" type="xs:double">
            <xs:annotation>
                <xs:documentation>Sets the y location to a value in [0,1] coordinates. Overrides position and statistic
                    values.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="zLocation" type="xs:double">
            <xs:annotation>
                <xs:documentation>Sets the z location to a value in [0,1] coordinates. Overrides position and statistic
                    values.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="zOrder" type="xs:int">
            <xs:annotation>
                <xs:documentation>Integer that determines the order in which items are drawn. If this is not specified,
                    items are drawn in the order they are found in the specification. This has no effect in a 3D
                    chart.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <!--		<xs:attribute name="clip" type="xs:boolean">-->
        <!--			<xs:annotation>-->
        <!--				<xs:documentation>If true, the iinermost frame will clip elements so they do not overflow its bounds. The default behavior may vary.</xs:documentation>-->
        <!--			</xs:annotation>-->
        <!--		</xs:attribute>-->
    </xs:complexType>
    <xs:complexType name="variableType">
        <xs:sequence>
            <xs:element ref="vis:extension" minOccurs="0"/>
            <xs:element name="aggregation" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Aggregates categories of a categorical variable based on the sum of values of a
                        different variable.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:attribute name="newCategory" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>The name of the category that is created if any aggregation
                                occurs.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="sumVariable" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>The variable whose categories are summed to determine the new category's
                                size.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="minFraction" use="required">
                        <xs:annotation>
                            <xs:documentation>The fraction (between 0 and 1) that will be used to determine if a
                                category is to be aggregated. If a category has a summed value less than the given
                                fraction of the overall sum, it will be aggregated unless it is the only such category
                                (in which case there is nothing with which to aggregate it!).
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minInclusive value="0"/>
                                <xs:maxInclusive value="1"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="id" type="xs:ID">
                        <xs:annotation>
                            <xs:documentation>An identifier for this element. The identifier must be unique within the
                                document and is required only when another element must reference this
                                one.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
            <xs:group ref="vis:format" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>Identifies the variable.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="categorical" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Whether this variable is categorical. If not, and it is not a date, the data values
                    are converted to doubles. The difference between a categorical and non-categorical variable is
                    profound and determines whether it can be used for faceting, the aesthetics with which it can be
                    used, and other purposes. It is legal and often useful to have two variables use the same base data
                    with different values for categorical and/or other attributes.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="label" type="xs:string">
            <xs:annotation>
                <xs:documentation>A human-readable name for the variable (defaults to the ID).</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="shortLabel" type="xs:string">
            <xs:annotation>
                <xs:documentation>A short human-readable label for the variable (defaults to the
                    label).
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="domain" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>All data exist in some domain, and that domain is used to control what the "minimum"
                    and "maximum" values are. By default, the domain of a variable is defined to be the data range (for
                    continuous variables) or the set of unique values of a variable (for categorical variables). If this
                    parameter is specified, the default domain is replaced with this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="labelVariable" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>By default, the values of a categorical variable are used as the labels. If this
                    attribute is specified, the given variable is used to label the categories of this variable. The
                    label variable must be of the same length as this variable, since it matches on a row-by-row basis,
                    and both must be categorical variables.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="weight" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, this variable will be used as a sample weight for all data in the same
                    source. At most one weight may be defined for a source.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="key" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Indicates the variable can be used as a database key; all entries in it should be
                    unique.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="creator" type="xs:string">
            <xs:annotation>
                <xs:documentation>The creator of this variable.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="description" type="xs:string">
            <xs:annotation>
                <xs:documentation>A description of the variable for human or machine use.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="source" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>The data source that contains the variables from which this variable is
                    derived.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="expressionVariable">
        <xs:annotation>
            <xs:documentation>Expression variables use a Grammar of Graphics expression to calculate a complex variable.
                This 'variable' may be multi-dimensional and its use in that case is determined by context. Used as a
                positional variable (for example, the 'x' value of an element), it may induce faceting. In an aesthetic,
                only one dimension is likely to be used.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:variableType">
                    <xs:attribute name="expression" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The expression in this attribute should be a legal Grammar of Graphics
                                algebraic expression (with the additional dot operator) based on existing variables and
                                the unity variable '1'.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="derivedVariable">
        <xs:annotation>
            <xs:documentation>Derived variables are variables that are derived from other source variables by means of a
                mathematical expression.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:variableType">
                    <xs:sequence>
                        <xs:element ref="vis:valueMapEntry" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                    <xs:attribute name="value" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>This variable is derived by calculating the expression given by this
                                attribute. Examples would be 'log(1+x)' or '(a-b)/(a+b)' , where x, a and b are the ids
                                of other source variables.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="domainType">
        <xs:sequence>
            <xs:group ref="vis:format" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>Identifier for the domain.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="date">
            <xs:annotation>
                <xs:documentation>If true, then the domain is for dates.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="formatType">
        <xs:annotation>
            <xs:documentation>To be used for formatting.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="prefix" type="xs:string">
            <xs:annotation>
                <xs:documentation>Prepend the value with this string.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="suffix" type="xs:string">
            <xs:annotation>
                <xs:documentation>Append the value with this string.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="position">
            <xs:annotation>
                <xs:documentation>Apply a position for the text.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="superscript">
                        <xs:annotation>
                            <xs:documentation>The text should be above the line.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="subscript">
                        <xs:annotation>
                            <xs:documentation>The text should be below the line.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="normal">
                        <xs:annotation>
                            <xs:documentation>The text should be even with the line (default).</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="textType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="id" type="xs:ID">
                    <xs:annotation>
                        <xs:documentation>An identifier for this element. The identifier must be unique within the
                            document and is required only when another element must reference this
                            one.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="position">
                    <xs:annotation>
                        <xs:documentation>Apply a position for the text.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="superscript">
                                <xs:annotation>
                                    <xs:documentation>The text should be above the line.</xs:documentation>
                                </xs:annotation>
                            </xs:enumeration>
                            <xs:enumeration value="subscript">
                                <xs:annotation>
                                    <xs:documentation>The text should be below the line.</xs:documentation>
                                </xs:annotation>
                            </xs:enumeration>
                            <xs:enumeration value="normal">
                                <xs:annotation>
                                    <xs:documentation>The text should be even with the line
                                        (default).</xs:documentation>
                                </xs:annotation>
                            </xs:enumeration>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="ticksType">
        <xs:sequence>
            <xs:element ref="vis:gridline" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>Identifier for the item.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="position">
            <xs:annotation>
                <xs:documentation>The allowed positions for tick marks relative to the axis baseline.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="inside">
                        <xs:annotation>
                            <xs:documentation>Place ticks inside the axis.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="outside">
                        <xs:annotation>
                            <xs:documentation>Place ticks outside the axis.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="cross">
                        <xs:annotation>
                            <xs:documentation>Place ticks so they cross the axis.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="markStyle" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>Style for the actual tick marks, which are the small lines not including the
                    labels.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="length" type="vis:length">
            <xs:annotation>
                <xs:documentation>The tick mark length. If undefined a value is chosen proportional to the font size
                    used for the tick labels.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="zOrder" type="xs:int">
            <xs:annotation>
                <xs:documentation>Integer that determines the order in which items are drawn. If this is not specified,
                    items are drawn in the order they are found in the specification.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="summaryStatistic">
        <xs:annotation>
            <xs:documentation>Summarizes the dependant variable for a set of data conditional on the values of the other
                position variables.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="convertIntervalToSingleValue" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, a summary statistic that is an interval (such as a confidence interval)
                        will be converted to a single value, the difference between the upper and lower
                        values.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="method" type="vis:summaryType">
                <xs:annotation>
                    <xs:documentation>The method used to summarize the data.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="summaryBase" type="vis:summaryBaseType">
                <xs:annotation>
                    <xs:documentation>The base for a percentage or fraction summary.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="percent">
                <xs:annotation>
                    <xs:documentation>The percentage value to use in the confidence interval
                        summary.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0"/>
                        <xs:maxExclusive value="100"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="summaryIndex" type="xs:int">
                <xs:annotation>
                    <xs:documentation>The index of the aesthetic or coordinate to use to set for
                        100%.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="summaryAcrossPanels" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, the summary base will be calculated across all panels, rather than on a
                        per-panel basis.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="augment" type="vis:augmentType">
                <xs:annotation>
                    <xs:documentation>Controls the way in which values for missing combinations of categories are
                        imputed.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="treeLayoutStatistic">
        <xs:annotation>
            <xs:documentation>Lays out a tree as a set of polygons using a space filling technique. This is in contrast
                to graphLayoutStatistic, which lays out a tree as a set of nodes and edges.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="itemVariable">
                <xs:annotation>
                    <xs:documentation>The variable to use for the unique identifiers for the nodes in the
                        tree.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="parent">
                <xs:annotation>
                    <xs:documentation>The variable to use to identify the parents of nodes in the
                        tree.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="addChildSizes" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, then the size variable specifies the size of the node not including its
                        children (therefore, the children sizes need to be added to get the total size). If false, then
                        the size variable already includes the size of the children. In that case, it is an error if the
                        children sizes add up to more than the node size. If there is no size variable, this flag is
                        ignored.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="method" type="vis:treeLayoutMethodType">
                <xs:annotation>
                    <xs:documentation>The method to use for laying out the tree.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="padding" type="vis:length">
                <xs:annotation>
                    <xs:documentation>The amount of space to use between nodes and their parents in the
                        tree.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="sizeVariable" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>The variable that gives the size of each tree node. If not specified, all nodes
                        are assumed to be the same size.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="spacing" type="vis:length">
                <xs:annotation>
                    <xs:documentation>The amount of spacing to place between sibling nodes in the
                        tree.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="tukeyStatistic">
        <xs:annotation>
            <xs:documentation>Calculates Tukey Letter Values. The main use of this is for boxplots.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="clusteringStatistic">
        <xs:annotation>
            <xs:documentation>Performs clustering. Currently only a single simple algorithm is
                implemented.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="variables" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Semicolon delimited list of variables to use in the
                        clustering.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="smoothStatistic">
        <xs:annotation>
            <xs:documentation>Fits a model to the data in order to provide a smooth version of the data. Common examples
                include simple linear regression, polynomial regression, loess curve fitting, and kernel
                smoothing.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="bandwith">
                <xs:annotation>
                    <xs:documentation>The width used for kernel smooths.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minExclusive value="0"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="intercept" type="xs:double">
                <xs:annotation>
                    <xs:documentation>If specified, forces the fit to go through (0, intercept). Only valid for
                        polynomial smooths.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="bounded" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Sets whether or not the model is bounded. If true, then the model is
                        bounded.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="cutpoints" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The cutpoints used in the model. This is an array of doubles separated by
                        semicolons (for example 4.5;.2;4;1.7E25).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="degree" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>The degree of the polynomial model.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="firstStep" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Whether or not the first step is set.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="gridded" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Whether or not to predict on gridded data.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="kernel" type="vis:kernelType">
                <xs:annotation>
                    <xs:documentation>The type of kernel to use for kernel smoothing.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="marron" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Whether or not to use the Marron adjustment for discrete data.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="method" type="vis:smoothMethodType">
                <xs:annotation>
                    <xs:documentation>The model to use to smooth data.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="neighbors" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>The number of neighbors to use for nearest neighbor kernel
                        model.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="proportion">
                <xs:annotation>
                    <xs:documentation>The proportion of the data to use for kernel models not based on nearest
                        neighbors.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0"/>
                        <xs:maxInclusive value="1"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="robust" type="vis:robustType">
                <xs:annotation>
                    <xs:documentation>The method for calculating robust statistics.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="segments" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>The number of segments to predict.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="spikes" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Whether or not to generate spikes to the fit line instead of actually generating
                        the fit line.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="window" type="vis:windowType">
                <xs:annotation>
                    <xs:documentation>The type of window to use for a kernel smooth model.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="fixedWindowDensityStatistic">
        <xs:annotation>
            <xs:documentation>A kernel density estimate that uses a fixed window width.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:densityStatistic">
                    <xs:attribute name="proportion">
                        <xs:annotation>
                            <xs:documentation>The proportion of the data to use for kernel window
                                size.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minExclusive value="0"/>
                                <xs:maxInclusive value="1"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="nearestNeighborDensityStatistic">
        <xs:annotation>
            <xs:documentation>A kernel density estimate for the distribution with a window that adapts to the local
                number of points.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:densityStatistic">
                    <xs:attribute name="neighbors" type="xs:integer">
                        <xs:annotation>
                            <xs:documentation>The number of neighbors to use to calculate the window
                                width.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="regionStatistic">
        <xs:annotation>
            <xs:documentation>Calculates regions of confidence such as confidence intervals.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="alpha">
                <xs:annotation>
                    <xs:documentation>The alpha value. Only used in some models (like confidence
                        intervals).
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0"/>
                        <xs:maxInclusive value="1"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="bounded" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true then the model is bounded.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="numberConditionals" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>Number of conditionals on a model.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="cutPoints" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The cutpoints used in the model. This is an array of doubles separated by
                        semicolons (for example 4.5;.2;4;1.7E25).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="degree" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>Degree of a polynomial model.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="df1" type="xs:double">
                <xs:annotation>
                    <xs:documentation>The first degree of freedom of a model. If a model has only one degree of freedom,
                        this is it.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="df2" type="xs:double">
                <xs:annotation>
                    <xs:documentation>The second degree of freedom of a model. If a model has only one degree of
                        freedom, this will be ignored.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="distribution" type="vis:distributionType">
                <xs:annotation>
                    <xs:documentation>Distribution (or model) for which the region will be
                        calculated.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="location" type="vis:regionLocationType">
                <xs:annotation>
                    <xs:documentation>The measure of central tendency for which the region will be
                        calculated.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="predictIndividuals" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, individuals will be predicted. If false, the mean value will be
                        predicted.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="segments" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>Number of segments to predict.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="regionType" type="vis:regionModelType">
                <xs:annotation>
                    <xs:documentation>The type of region for calculating the statistic.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="mapStatistic">
        <xs:annotation>
            <xs:documentation>Defines a set of map features based on a map source and a variable defining keys into that
                map source.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="vis:categories">
                    <xs:annotation>
                        <xs:documentation>A restriction on the keys that may be displayed. If the 'exclude' flag is set,
                            these categories will be excluded from the keys, otherwise the keys will be restricted
                            to within these categories only.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="mapFile" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>File path or URL to map file.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="showAll" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>If true, all map features will be shown. If false, only those matching data will
                        be shown.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="mapKey" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Name of the key in the map used to match map features in the map
                        file.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="layer" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Layer within the map file currently being used.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="keyVariable" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>Variable in the data used as a key to match map features in the map file. The
                        values from the variable specified must match the key values found in the map
                        file.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="sourceFormat">
                <xs:annotation>
                    <xs:documentation>Format of the source map file.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="dataKey">
                <xs:annotation>
                    <xs:documentation>The variable in the data used as a key to match map features in the map file. The
                        values from the variable specified must match the key values found in the map
                        file.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="linkStatistic">
        <xs:annotation>
            <xs:documentation>Creates links between data points. The 'type' determines the type of link. If the type is
                'byDimension' (the default), then the X,Y and Z attributes determine the behavior on a per-dimension
                basis. Any dimension left unspecified copies the locations from the data points.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="type" type="vis:linkType">
                <xs:annotation>
                    <xs:documentation>The type of links to create. Defaults to 'byDimension'.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="x" type="vis:linkToType">
                <xs:annotation>
                    <xs:documentation>If type=byDimension, determines the location to which to link the x
                        dimension.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="y" type="vis:linkToType">
                <xs:annotation>
                    <xs:documentation>If type=byDimension, determines the location to which to link the y
                        dimension.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="z" type="vis:linkToType">
                <xs:annotation>
                    <xs:documentation>If type=byDimension, the location to which to link the z
                        dimension.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="neighborCount" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>If type=neighbor, the number of neighbors to link.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="radius" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>If type=alpha or type=distance, the maximum radius allowed for a
                        link.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="graphLayoutStatistic">
        <xs:annotation>
            <xs:documentation>Lays out the edges of a node/edge graph. Note that the edge variables are required while
                the weight variable is optional.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="initial" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>A one-step process to lay out a graph. This may be the only algorithm used, or
                            one of the update algorithms can process the layout further.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="type" type="vis:graphLayoutType">
                            <xs:annotation>
                                <xs:documentation>Method used to layout the graph initially.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="root" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>Identifier of the root node of the graph. Some methods can use this to
                                    lay out a graph, but it is never required.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="hideSingleNodes" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>Visibility of nodes that have no edges.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="whenEdgesHidden" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>If true, the nodes are hidden when edges are hidden.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="swap" type="vis:improveLayout">
                        <xs:annotation>
                            <xs:documentation>Swaps nodes around if doing so improves the graph.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="polarize" type="vis:improveLayout">
                        <xs:annotation>
                            <xs:documentation>Projects the graph into polar coordinates. Useful for trees and DAGs as
                                the root node becomes the center
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="randomize">
                        <xs:annotation>
                            <xs:documentation>Completely randomizes all nodes, swapping them all with each other.
                                Accepts the result if it improves the graph.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:complexContent>
                                <xs:extension base="vis:improveLayout">
                                    <xs:attribute name="failuresNeededToStop" type="xs:integer">
                                        <xs:annotation>
                                            <xs:documentation>The number of successive failures needed to terminate this
                                                algorithm.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:extension>
                            </xs:complexContent>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="move">
                        <xs:annotation>
                            <xs:documentation>Moves individual nodes in a neighborhood around themselves, trying to find
                                a better location.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:complexContent>
                                <xs:extension base="vis:improveLayout">
                                    <xs:attribute name="initialDistance">
                                        <xs:annotation>
                                            <xs:documentation>The initial distance to try moving nodes in range
                                                (0,1).
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:simpleType>
                                            <xs:restriction base="xs:double">
                                                <xs:minExclusive value="0"/>
                                                <xs:maxExclusive value="1"/>
                                            </xs:restriction>
                                        </xs:simpleType>
                                    </xs:attribute>
                                    <xs:attribute name="reductionFactor">
                                        <xs:annotation>
                                            <xs:documentation>Each step, the amount to move nodes by is multiplied by
                                                this factor, which must be in the range (0,1].
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:simpleType>
                                            <xs:restriction base="xs:double">
                                                <xs:minExclusive value="0"/>
                                                <xs:maxExclusive value="1"/>
                                            </xs:restriction>
                                        </xs:simpleType>
                                    </xs:attribute>
                                </xs:extension>
                            </xs:complexContent>
                        </xs:complexType>
                    </xs:element>
                </xs:choice>
                <xs:element name="fixedNode" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>States that a node should be moved to a fixed location after the algorithm has
                            run, regardless of where it was placed by the algorithm.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="id" type="xs:ID">
                            <xs:annotation>
                                <xs:documentation>An identifier for this element. The identifier must be unique within
                                    the document and is required only when another element must reference this
                                    one.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="node" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>The name (ID) of the node to place at a fixed
                                    location.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="x" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>The x location to move to.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="y" type="xs:double">
                            <xs:annotation>
                                <xs:documentation>The y location to move to.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="from" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>Variable that defines the start of edges.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="to" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>Variable that defines the end of edges.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="nodes" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Variable that defines the nodes to use.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="group" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>Variable that defines the grouping of the nodes.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="distributionStatistic">
        <xs:annotation>
            <xs:documentation>Creates a distribution that fits the data.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="distribution" type="vis:distributionType">
                <xs:annotation>
                    <xs:documentation>The distribution to use with a probability scale.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="parameter" type="xs:string">
                <xs:annotation>
                    <xs:documentation>A parameter for a distribution. If a distribution parameter is used, it is
                        documented with the specific type.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="secondaryParameter" type="xs:string">
                <xs:annotation>
                    <xs:documentation>A parameter for a distribution. If a distribution parameter is used, it is
                        documented with the specific type.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="segments" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>The number of segments to generate for the distribute.
                        If unspecified, a default is used.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>

    </xs:element>
    <xs:element name="collectRowsStatistic">
        <xs:annotation>
            <xs:documentation>Merges all the rows of a table so that aesthetics calculated on them are all the same.
                This essentially makes individual data items one group.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="aggregateStatistic">
        <xs:annotation>
            <xs:documentation>Aggregates data that are at the same coordinates.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="binStatistic">
        <xs:annotation>
            <xs:documentation>A bin statistic bins the data into regular bins. If bin widths or counts are not
                specified, bin sizes are calculated automatically.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="binCount" type="xs:string">
                <xs:annotation>
                    <xs:documentation>An array of counts for the number of bins, one for each dimension on which binning
                        will occur. This may not be specified in conjunction with binWidth.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="binWidth" type="xs:string">
                <xs:annotation>
                    <xs:documentation>An array of sizes (in data units) for bins, one for each dimension on which
                        binning will occur. This may not be specified in conjunction with binCount.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="binStart" type="xs:string">
                <xs:annotation>
                    <xs:documentation>An array of start locations for the bins, one for each dimension on which binning
                        will occur.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="gridType" type="vis:gridType">
                <xs:annotation>
                    <xs:documentation>The type of grid to use.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="location" type="vis:binLocationType">
                <xs:annotation>
                    <xs:documentation>When points are aggregated within a single bin, this attribute defines where they
                        are placed within the bin.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="method" type="vis:binMethodType">
                <xs:annotation>
                    <xs:documentation>Define whether to bin all variables, just the independent one, or whether to bin
                        everything and aggregate.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="dimensions" type="xs:string">
                <xs:annotation>
                    <xs:documentation>A semicolon separated list of dimensions to bin, starting from 1 (x). This
                        overrides the 'method' parameter, for the purpose of setting dimensions.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="gridType">
        <xs:annotation>
            <xs:documentation>Defines the shape of bins to use.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="hex">
                <xs:annotation>
                    <xs:documentation>Specifies that hexagonal grids should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="dot">
                <xs:annotation>
                    <xs:documentation>Specifies that the dot algorithm should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="square">
                <xs:annotation>
                    <xs:documentation>Specifies that rectangular grids should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="voronoi">
                <xs:annotation>
                    <xs:documentation>Specifies that a Voronoi tessellation should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="binLocationType">
        <xs:annotation>
            <xs:documentation>Represents when you bin data, where the resulting value is placed relative to the
                bin.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="grid">
                <xs:annotation>
                    <xs:documentation>Place the result at the grid center.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="centroid">
                <xs:annotation>
                    <xs:documentation>Place the result at the centroid of the data that falls within that
                        bin.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="binMethodType">
        <xs:annotation>
            <xs:documentation>Which dimensions to bin, an whether to aggregate.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="aggregate">
                <xs:annotation>
                    <xs:documentation>Similar to allDimensions, except that the data are aggregated so that a single
                        item appears in each bin.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="allDimensions">
                <xs:annotation>
                    <xs:documentation>All the dimensions are used for binning, but the data are not aggregated (thus you
                        get several points all on top of each other).
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="notResponse">
                <xs:annotation>
                    <xs:documentation>All the dimensions except the response dimension (usually 'Y') are used for
                        binning, and the data are not aggregated.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="graphLayoutType">
        <xs:annotation>
            <xs:documentation>Defines the possible types of graph layouts.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="grid">
                <xs:annotation>
                    <xs:documentation>Lays out the graph by placing the nodes at regular grid points to make a square
                        grid.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="random">
                <xs:annotation>
                    <xs:documentation>Places the nodes randomly within a square.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="tree">
                <xs:annotation>
                    <xs:documentation>
                        Lays out the graph out as a directed tree. If the graph does not form a true tree, then the
                        statistic will create a maximal spanning tree from the graph and lay that out.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="DAG">
                <xs:annotation>
                    <xs:documentation>
                        Lays out the graph using a general directed acyclic graph algorithm.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="circle">
                <xs:annotation>
                    <xs:documentation>Lays out the graph around the edge of a circle.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="linkToType">
        <xs:annotation>
            <xs:documentation>Defines the possible types of graph layouts.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="centroid">
                <xs:annotation>
                    <xs:documentation>Specifies that a link terminates at the mean value of the group on which the
                        statistic is calculated.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="base">
                <xs:annotation>
                    <xs:documentation>Specifies that a link terminates at the "bottom" of the plot
                        area.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="origin">
                <xs:annotation>
                    <xs:documentation>specifies that a link terminates at the origin of the charts coordinate
                        space.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="midrange">
                <xs:annotation>
                    <xs:documentation>Specifies that a link terminates at the middle of the range of values of the group
                        on which the statistic is calculated.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="mapSourceFormatType">
        <xs:annotation>
            <xs:documentation>Specifies the format of a map source.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="text">
                <xs:annotation>
                    <xs:documentation>A proprietary text format intended for simple map descriptions.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="basic">
                <xs:annotation>
                    <xs:documentation>A proprietary binary format intended for single layer optimized map
                        files.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="multiLayer">
                <xs:annotation>
                    <xs:documentation>A proprietary binary format intended for complex, multi-layer map
                        files.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="distributionType">
        <xs:annotation>
            <xs:documentation>States the type of statistical distribution (also known as model) used in the calculation
                of a statistic.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="uniform">
                <xs:annotation>
                    <xs:documentation>Indicates the uniform distribution. parameter is a, the minimum
                        of the distribution. secondaryParameter is b, the maximum of the distribution.
                        Both parameters may be left out, in which case they will be estimated from the data using method
                        of moments. It is an error to specify only one of the parameters.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="normal">
                <xs:annotation>
                    <xs:documentation>Indicates the normal distribution. parameter is mu, the mean of
                        the distribution. secondaryParameter is sigma, the standard deviation of the distribution.
                        Either or both parameters may be left out, in which case they will be estimated from the data
                        using maximum likelihood.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="t">
                <xs:annotation>
                    <xs:documentation>Indicates tthe t distribution. parameter is df, the degrees of
                        freedom of the distribution. secondaryParameter is unused.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="f">
                <xs:annotation>
                    <xs:documentation>Indicates the f distribution. parameter and secondaryParameter
                        are df1 and df2, the degrees of freedom of the distribution.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="chisquare">
                <xs:annotation>
                    <xs:documentation>Indicates the chi-square distribution. parameter is df, the
                        degrees of freedom of the distribution. secondaryParameter is unused.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="gamma">
                <xs:annotation>
                    <xs:documentation>Indicates the gamma distribution. parameter is df, the degrees
                        of freedom of the distribution. secondaryParameter is unused.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="beta">
                <xs:annotation>
                    <xs:documentation>Indicates the beta distribution. parameter and
                        secondaryParameter are df1 and df2, the degrees of freedom of the
                        distribution.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="exponential">
                <xs:annotation>
                    <xs:documentation>Indicates the exponential distribution. parameter is the rate,
                        and secondaryParameter is unused.
                        The rate parameter may be left out, in which case it will be estimated from the data using
                        method of moments.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="logistic">
                <xs:annotation>
                    <xs:documentation>Indicates the logistic distribution. parameter is the location
                        of the distribution, and secondaryParameter is the spread of the distribution
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="studentizedrange">
                <xs:annotation>
                    <xs:documentation>Indicates the Studentized range distribution. parameter and
                        secondaryParameter are df1 and df2, the degrees of freedom of the
                        distribution.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="weibull">
                <xs:annotation>
                    <xs:documentation>Indicates the Weibull distribution. parameter and
                        secondaryParameter are df1 and df2, the degrees of freedom of the
                        distribution.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="poisson">
                <xs:annotation>
                    <xs:documentation>Indicates the poisson distribution. parameter is lambda and
                        secondaryParameter is unused.
                        The lambda parameter may be left out, in which case it will be estimated from the data using
                        method of moments.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="colorAffectType">
        <xs:annotation>
            <xs:documentation>Type of color affected. Fill colors are for the interior of a drawn object while a stroke
                color is for the edge of the drawn object. Note that some objects, such as lines do not have an
                interior.
                MAIN is usually a fill color.
                SECONDARY is usually a stroke color.
                BOTH affects both.
                FILL is explicitly a fill color. MAIN or SECONDARY should be used instead.
                STROKE is explicitly a stroke color. MAIN or SECONDARY should be used instead.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="both">
                <xs:annotation>
                    <xs:documentation>Both the main color and the secondary color will be affected.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="main">
                <xs:annotation>
                    <xs:documentation>The main color which is usually a fill color will be affected.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="secondary">
                <xs:annotation>
                    <xs:documentation>The secondary color which is usually a draw color will be
                        affected.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="stroke">
                <xs:annotation>
                    <xs:documentation>Always affect the stroke. For most purposes, it is better to use MAIN or
                        SECONDARY.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fill">
                <xs:annotation>
                    <xs:documentation>Always affect the fill. For most purposes, it is better to use MAIN or
                        SECONDARY.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="regionLocationType">
        <xs:annotation>
            <xs:documentation>Defines the central measure that defines confidence and other
                intervals.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="mean">
                <xs:annotation>
                    <xs:documentation>Used when the mean is desired.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="median">
                <xs:annotation>
                    <xs:documentation>Used when the median is desired.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="mode">
                <xs:annotation>
                    <xs:documentation>Used when the mode is desired.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="regionModelType">
        <xs:annotation>
            <xs:documentation>Defines the distribution or model for calculating a region
                statistic.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="uniform">
                <xs:annotation>
                    <xs:documentation>Indicates that the uniform distribution is to be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="range">
                <xs:annotation>
                    <xs:documentation>Indicates that the range distribution is to be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="sd">
                <xs:annotation>
                    <xs:documentation>Indicates that the standard deviation distribution is to be
                        used.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="se">
                <xs:annotation>
                    <xs:documentation>Indicates that the standard error distribution is to be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="linear">
                <xs:annotation>
                    <xs:documentation>Indicates that the linear distribution is to be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="quadratic">
                <xs:annotation>
                    <xs:documentation>Indicates that the quadratic distribution is to be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cubic">
                <xs:annotation>
                    <xs:documentation>Indicates that the cubic distribution is to be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="polynomial">
                <xs:annotation>
                    <xs:documentation>Indicates that the polynomial distribution is to be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="piecewise">
                <xs:annotation>
                    <xs:documentation>Indicates that the piecewise distribution is to be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="confi">
                <xs:annotation>
                    <xs:documentation>Indicates that the confidence interval distribution is to be
                        used.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="mad">
                <xs:annotation>
                    <xs:documentation>Indicates that the mean absolute deviation distribution is to be
                        used.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="kernelType">
        <xs:annotation>
            <xs:documentation>Specifies which kernel function to use in the calculation of statistics. This is usually
                used for smooth statistics.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="uniform">
                <xs:annotation>
                    <xs:documentation>Specifies that a uniform kernel should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="epanechnikov">
                <xs:annotation>
                    <xs:documentation>Specifies that a Epanechnikov kernel should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="biweight">
                <xs:annotation>
                    <xs:documentation>Specifies that a biweight kernel should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="triweight">
                <xs:annotation>
                    <xs:documentation>Specifies that a triweight kernel should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="tricube">
                <xs:annotation>
                    <xs:documentation>Specifies that a tricube kernel should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="gaussian">
                <xs:annotation>
                    <xs:documentation>Specifies that a Gaussian kernel should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cauchy">
                <xs:annotation>
                    <xs:documentation>Specifies that a Cauchy kernel should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="smoothMethodType">
        <xs:annotation>
            <xs:documentation>Used to dictates how to smooth data.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="linear">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a linear model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="loess">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a loess model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="power">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a power model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="quadratic">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a quadratic model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="monotonic">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a monotonic model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cubic">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a cubic model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="polynomial">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a polynomial model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="log">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a log model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="piecewise">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a piecewise linear model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="mean">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a simple mean model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="median">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a simple median model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="trim">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a trimmed mean model to the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="spline">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a spline to the data</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="step-left">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a step function to the left of the data points</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="step-right">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a step function to the right of the data
                        points
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="step-center">
                <xs:annotation>
                    <xs:documentation>Specifies to fit a step function centered on each data point</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="robustType">
        <xs:annotation>
            <xs:documentation>States what method of calculating a robust statistic to use.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="andrews">
                <xs:annotation>
                    <xs:documentation>Specifies that the Andrews method should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="biweight">
                <xs:annotation>
                    <xs:documentation>Specifies that the biweight method should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cauchy">
                <xs:annotation>
                    <xs:documentation>Specifies that the Cauchy method should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fair">
                <xs:annotation>
                    <xs:documentation>Specifies that the fair method should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="huber">
                <xs:annotation>
                    <xs:documentation>Specifies that the Huber method should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="logistic">
                <xs:annotation>
                    <xs:documentation>Specifies that the logistic method should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="talwar">
                <xs:annotation>
                    <xs:documentation>Specifies that the Talwar method should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="welsch">
                <xs:annotation>
                    <xs:documentation>Specifies that the Welsch method should be used.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="windowType">
        <xs:annotation>
            <xs:documentation>Used to specify how to calculate the kernel window width.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="fixed">
                <xs:annotation>
                    <xs:documentation>Specifies that the window size is fixed across all data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="summaryBaseType">
        <xs:annotation>
            <xs:documentation>The base of a percentage for a statistic.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="global">
                <xs:annotation>
                    <xs:documentation>The percentage base is calculated from the data for the whole chart or
                        panel.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="aesthetic">
                <xs:annotation>
                    <xs:documentation>The percentage base is calculated from the data within one or more aesthetics for
                        chart or panel.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="coordinate">
                <xs:annotation>
                    <xs:documentation>The percentage base is calculated from the data within one or more coordinates for
                        chart or panel.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="augmentType">
        <xs:annotation>
            <xs:documentation>Defines methods for imputing values for missing combinations of
                categories.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="zero">
                <xs:annotation>
                    <xs:documentation>A zero value will be added where there are missing combinations of
                        categories.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="missing">
                <xs:annotation>
                    <xs:documentation>A missing value will be added where there are missing combinations of
                        categories.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="none">
                <xs:annotation>
                    <xs:documentation>No values will be added for missing combinations of categories.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="summaryType">
        <xs:annotation>
            <xs:documentation>The various supported summary methods.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="mean">
                <xs:annotation>
                    <xs:documentation>The mean of the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="sum">
                <xs:annotation>
                    <xs:documentation>The sum of the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="midRange">
                <xs:annotation>
                    <xs:documentation>The middle of the range of the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="percent">
                <xs:annotation>
                    <xs:documentation>The percent of this group of data compared to all the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="percentCount">
                <xs:annotation>
                    <xs:documentation>The percent of the count of this group of data compared to all the
                        data.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fraction">
                <xs:annotation>
                    <xs:documentation>The fraction of this group of data compared to all the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fractionCount">
                <xs:annotation>
                    <xs:documentation>The fraction of the count of this group of data compared to all the
                        data.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="range">
                <xs:annotation>
                    <xs:documentation>The range of values for data. This may be used as either a two-value interval, or
                        a one-value extent.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="confidenceIntervalOfMean">
                <xs:annotation>
                    <xs:documentation>The simple confidence interval for the mean. This may be used as either a
                        two-value interval, or a one-value extent.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="confidenceIntervalIndividual">
                <xs:annotation>
                    <xs:documentation>The simple confidence interval for individuals. This may be used as either a
                        two-value interval, or a one-value extent.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="count">
                <xs:annotation>
                    <xs:documentation>The number of individuals in the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="confidenceIntervalOfCount">
                <xs:annotation>
                    <xs:documentation>The simple confidence interval for a count. This may be used as either a
                        two-value interval, or a one-value extent.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="confidenceIntervalOfPercentCount">
                <xs:annotation>
                    <xs:documentation>The simple confidence interval for a percentage. This may be used as either a
                        two-value interval, or a one-value extent.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="confidenceIntervalOfFractionCount">
                <xs:annotation>
                    <xs:documentation>The simple confidence interval for a fraction of counts. This may be used as
                        either a
                        two-value interval, or a one-value extent.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="rowCount">
                <xs:annotation>
                    <xs:documentation>The number of rows in the data. This is like count, but only counts data from
                        blends once.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="stddev">
                <xs:annotation>
                    <xs:documentation>The standard deviation for the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="stderr">
                <xs:annotation>
                    <xs:documentation>The standard error for the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="median">
                <xs:annotation>
                    <xs:documentation>The median for the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="max">
                <xs:annotation>
                    <xs:documentation>The maximum value for the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="min">
                <xs:annotation>
                    <xs:documentation>The minimum value for the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="variance">
                <xs:annotation>
                    <xs:documentation>The variance of the data.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cumulativeSum">
                <xs:annotation>
                    <xs:documentation>The cumulative sum, which summarizes each category and adds it to the previous
                        category, through all categories in the data.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cumulativePercent">
                <xs:annotation>
                    <xs:documentation>Cumulative percentage across all categories in the data, the final value being
                        100.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cumulativePercentCount">
                <xs:annotation>
                    <xs:documentation>Cumulative percentage of the counts across all categories in the data, the final
                        value being
                        100.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cumulativeFraction">
                <xs:annotation>
                    <xs:documentation>Cumulative fraction across all categories in the data, the final value being
                        1.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cumulativeFractionCount">
                <xs:annotation>
                    <xs:documentation>Cumulative fraction of the counts across all categories in the data, the final
                        value being
                        1.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cumulativeCount">
                <xs:annotation>
                    <xs:documentation>The cumulative count, which counts each category and adds it to the previous
                        category, through all the categories in the data.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="treeLayoutMethodType">
        <xs:annotation>
            <xs:documentation>The various kinds of tree layouts.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="treemap">
                <xs:annotation>
                    <xs:documentation>Specifies a layout method based on mosaic plots, and similar to the treemap plot
                        of Schniedermann.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="simple">
                <xs:annotation>
                    <xs:documentation>Specifies a top down traditional tree layout.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:element name="frameGuide">
        <xs:annotation>
            <xs:documentation>A wire frame in 3D. The complete property determines whether or not to draw the part of
                the frame that is in front.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:guideType">
                    <xs:attribute name="complete" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether or not to draw the part of the frame that is
                                front.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="functionGuide">
        <xs:annotation>
            <xs:documentation>A function guide that plots a line or surface in terms of an equation. The function guide
                has properties for the different dimensions (x, y, z). The numberPoints attribute is used to control how
                many points are used in drawing the line.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:guideType">
                    <xs:attribute name="value" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The equation for the y dimension.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="y" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Deprecated: Use 'value' instead</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="segments" type="xs:int">
                        <xs:annotation>
                            <xs:documentation>The number of segments to use in drawing the line that corresponds to the
                                function.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="expandToFit" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, the range should be expanded to fit this guide.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="attach">
        <xs:annotation>
            <xs:documentation>Sets positions using the values of another element. It matches positions from this element
                against keys from the target element. When a match occurs, the position from the target is set. If there
                is
                no match, the item is not drawn.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="target" type="xs:IDREF" use="required">
                <xs:annotation>
                    <xs:documentation>Target element from which to get the position.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="targetKey" type="xs:IDREF" use="required">
                <xs:annotation>
                    <xs:documentation>The variable used to match in the target element.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="numberPoints" type="xs:int">
                <xs:annotation>
                    <xs:documentation>Deprecated: Use 'segments' instead</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="lineGuide">
        <xs:annotation>
            <xs:documentation>A line guide. Coordinates at which to draw the line must be provided. A position must be
                specified with the coordinate properties in data space: x, y, z, x1, x2, y1, y2. By using combinations,
                it is possible to create lines to be drawn in any 2D orientation, and lying at a z depth, for a
                particular facet. This guide can be used in 2D and 3D systems.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:guideType">
                    <xs:attribute name="x" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Location of vertical line on x axis.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="y" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Location of horizontal line on y axis.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="z" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Location of line in z dimension.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="x1" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>When x and y not specified, (x1,y1,x2,y2) define the line to be
                                drawn.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="x2" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>When x and y not specified, (x1,y1,x2,y2) define the line to be
                                drawn.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="y1" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>When x and y not specified, (x1,y1,x2,y2) define the line to be
                                drawn.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="y2" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>When x and y not specified, (x1,y1,x2,y2) define the line to be
                                drawn.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="expandToFit" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, the range should be expanded to fit this guide.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="rectangleGuide">
        <xs:annotation>
            <xs:documentation>A rectangle guide. Parameters for the rectangle giving the two points of its corners in
                data space must be given.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:guideType">
                    <xs:attribute name="x1" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The x coordinate of the first point of the rectangle.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="x2" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The x coordinate of the second point of the rectangle.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="y1" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The y coordinate of the first point of the rectangle.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="y2" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The y coordinate of the second point of the rectangle.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="planeGuide">
        <xs:annotation>
            <xs:documentation>A plane guide in 3D. The plane is drawn normal to an axis at the back of the coordinate
                system. The normal is specified by the normal attribute.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:guideType">
                    <xs:attribute name="normal" type="vis:axisType">
                        <xs:annotation>
                            <xs:documentation>The dimension of the normal vector to the plane (e.g., if the normal is
                                'x', then the plane is in the y-z dimensions)
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="pointGuide">
        <xs:annotation>
            <xs:documentation>A point guide which is drawn using the glyph specified by the style. Coordinates are given
                to specify the location at which it should be drawn. Possible coordinates are x,y,z. This guide can be
                used in 2D and 3D systems.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:guideType">
                    <xs:attribute name="x" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>x position in data space.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="y" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>y position in data space.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="z" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>z position in data space.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="guideType">
        <xs:sequence>
            <xs:element ref="vis:label" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="vis:conditionalStyle" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="name" type="xs:string">
            <xs:annotation>
                <xs:documentation>The name of the guide. The name is a human-readable string that may be
                    used to name the guide in a legend or to be read by a screen reader. If not defined, the
                    ID will be used instead.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="style" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>The style for this guide.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="zOrder" type="xs:int">
            <xs:annotation>
                <xs:documentation>Integer that determines the order in which items are drawn. If this is not specified,
                    items are drawn in the order they are found in the specification.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:simpleType name="axisType">
        <xs:annotation>
            <xs:documentation>Different cartesian axes.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="x">
                <xs:annotation>
                    <xs:documentation>Used for the x axis.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="y">
                <xs:annotation>
                    <xs:documentation>Used for the y axis.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="z">
                <xs:annotation>
                    <xs:documentation>Used for the z axis.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="animationModeType">
        <xs:annotation>
            <xs:documentation>Animation modes</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="fullAnimation">
                <xs:annotation>
                    <xs:documentation>Full animation.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="automatic">
                <xs:annotation>
                    <xs:documentation>Automatic animation.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="manipulation">
                <xs:annotation>
                    <xs:documentation>Manipulation mode.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="dimensionType">
        <xs:annotation>
            <xs:documentation>Different Cartesian dimensions</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="x">
                <xs:annotation>
                    <xs:documentation>Used for the x dimension.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="y">
                <xs:annotation>
                    <xs:documentation>Used for the y dimension.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="z">
                <xs:annotation>
                    <xs:documentation>Used for the z dimension.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="drillDownType">
        <xs:annotation>
            <xs:documentation>Interaction types allowed in drillDown element.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="onClick">
                <xs:annotation>
                    <xs:documentation>Drill down on a click.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="onMouseDown">
                <xs:annotation>
                    <xs:documentation>Drill down on the mouse button being pushed down.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="onMouseUp">
                <xs:annotation>
                    <xs:documentation>Drill down on the mouse button being release.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="onMouseOver">
                <xs:annotation>
                    <xs:documentation>Drill down if the mouse pointer goes over the glyph.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="onMouseOut">
                <xs:annotation>
                    <xs:documentation>Drill down when the mouse pointer leaves the glyph.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="selectionModeType">
        <xs:annotation>
            <xs:documentation>Used to describe a mode of selection.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="click">
                <xs:annotation>
                    <xs:documentation>Something is selected if it is clicked.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="rectangle">
                <xs:annotation>
                    <xs:documentation>Something is selected if it falls partially within the bounds of a rectangle
                        specified by actions of the mouse.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="hover">
                <xs:annotation>
                    <xs:documentation>Something is selected if the cursor hovers over it.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="interaction">
        <xs:annotation>
            <xs:documentation>An interaction defines some sort of interactivity that a client may provide for a
                graph</xs:documentation>
        </xs:annotation>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="active" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If set to false, the controller will be inactive</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>


    <xs:element name="lineGuideController">
        <xs:annotation>
            <xs:documentation>Specifies a controller that will create line guides in response to user
                clicks. Users can drag the existing line guides to new locations.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction">
                    <xs:attribute name="newLineOrientation" type="vis:dimensionType">
                        <xs:annotation>
                            <xs:documentation>The dimension against which any new line guides are
                                created.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="snapToInteger" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether to snap a line guide to the nearest integer or
                                not.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="rectangleGuideController">
        <xs:annotation>
            <xs:documentation>Specifies a controller that will create rectangle guides in response to user
                clicks. Users can drag the existing rectangle guides to new
                locations.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction">
                    <xs:attribute name="style" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The style for the rectangle as it is being dragged</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="interactive3dRotation">
        <xs:annotation>
            <xs:documentation>Specifies a controller that may rotate a 3D graph.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction"/>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="dragElement">
        <xs:annotation>
            <xs:documentation>Defines an interaction that allows elements to be dragged from their normal
                places.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction">
                    <xs:attribute name="target" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>The element to allow drag on.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="zooming">
        <xs:annotation>
            <xs:documentation>Specifies zooming interactivity. This allows one to create a selection area and then zoom
                the graph to the selected area.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction">
                    <xs:attribute name="target" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>An element that should be targeted for the popup.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="popup">
        <xs:annotation>
            <xs:documentation>Specifies popup interactivity for a visualization.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="tokenMapping">
                            <xs:annotation>
                                <xs:documentation>Defines a token to be used in the popup via the tokenTemplate
                                    attribute on the
                                    parent element.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:annotation>
                                        <xs:documentation>how to modify the variable via summarization of formatting.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:element ref="vis:summaryStatistic" minOccurs="0" maxOccurs="unbounded"/>
                                    <xs:group ref="vis:format" minOccurs="0" maxOccurs="unbounded"/>
                                </xs:sequence>
                                <xs:attribute name="id" type="xs:ID">
                                    <xs:annotation>
                                        <xs:documentation>An identifier for this element. The identifier must be unique within the document
                                            and is required only when another element must reference this one.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="variable" type="xs:IDREF" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The variable to use to get a value for the
                                            token.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="columnToken">
                                    <xs:annotation>
                                        <xs:documentation>The token to use for the column name.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="valueToken">
                                    <xs:annotation>
                                        <xs:documentation>The token to use for the value.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="style" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>A style for the popup (may not be honored in all output
                                forms).</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="target" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>An element that should be targeted for the popup.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="tokenTemplate" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The template for the popup. This can be used in conjunction with the child
                                tokenMapping element by using $[q]$, where q is the value of the valueToken attribute on
                                the
                                tokenMapping element to display.
                            </xs:documentation>
                            <xs:appinfo>
                                <p type="body">For example, if you were using
                                    <inlinetag type="code">&lt;popup target="point1" tokenTemplate="$[1]$">&lt;tokenMapping
                                        valueToken="1" variable="gender"/>&lt;/popup>
                                    </inlinetag>
                                    , the popup would display the value of gender for the element that corresponds to
                                    point1.
                                </p>
                            </xs:appinfo>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="brushing">
        <xs:annotation>
            <xs:documentation>Specifies a brushing interactivity with a visualization. Brushing changes the rendering of
                element glyphs chosen by selection with the mouse. A given brushing element describes what to brush
                based upon the given target attribute. Brushing occurs across the complete set of brushing elements in a manner
                determined by the linkMode.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction">
                    <xs:sequence>
                        <xs:annotation>
                            <xs:documentation>Specifies how to brush on the given aesthetic.</xs:documentation>
                        </xs:annotation>
                        <xs:group ref="vis:aesthetic" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="target" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>An element that should be targeted for the brushing.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="splitting" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether to split the element up. If true, elements will be split by the
                                brushing
                                action in the same way as they would be by a categorical variable on an
                                aesthetic.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="linkMode">
                        <xs:annotation>
                            <xs:documentation>Set the mode in which this brushing element links to other elements. This
                                property is used to determine which glyphs to brush across the entire set of brushing
                                elements
                                in a given visualization.</xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="source">
                                    <xs:annotation>
                                        <xs:documentation>Source of brushing requests only. When selecting these
                                            elements,
                                            target brushing elements of mode 'receiver' or 'both' are brushed. Elements
                                            of mode
                                            'source' are
                                            never brushed.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="receiver">
                                    <xs:annotation>
                                        <xs:documentation>Receives brushing requests only. These elements are brushed
                                            when
                                            elements of mode 'receiver' or 'both' are selected. Elements of mode
                                            'receiver'
                                            cannot
                                            be selected.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="both">
                                    <xs:annotation>
                                        <xs:documentation>Receiver and source of brushing requests. You can select these
                                            elements
                                            to brush elements of mode 'receiver' or 'both', or these elements can be
                                            brushed
                                            when elements
                                            of mode 'source' or 'both' are selected.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="selectionMode" type="vis:selectionModeType">
                        <xs:annotation>
                            <xs:documentation>Set the mode to use in selecting glyphs to brush.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="source" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>The data source to brush on.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="drillDown">
        <xs:annotation>
            <xs:documentation>Specifies an action that occurs as a result of clicking a visualization. If the drilldown
                target is a ViZml file, that ViZml will replace the current visualization. If it is an HTML file, a
                browser window is opened to show the results.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction">
                    <xs:sequence>
                        <xs:element ref="vis:variableReference" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                    <xs:attribute name="target" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>An element that should be targeted for drill down.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="function" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Used to construct a function call, such as to provide a JavaScript
                                function for 'onClick'.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="interactionType" type="vis:drillDownType">
                        <xs:annotation>
                            <xs:documentation>The type of interaction that triggers the drill-down
                                action.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="urlBase" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>If set, the variable used for the drill down has this value prepended to
                                its name
                                and the resulting string is used for the drill down.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="filterController">
        <xs:annotation>
            <xs:documentation>Specifies that when you click on a a given frame, you will be able to modify filters for
                a given source</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction">
                    <xs:attribute name="target" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>A frame that the controller will be active for. If undefined, will eb the
                                whole
                                visualization</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="source" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>The source that will be controlled. If undefined, will be the first
                                source</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="animation">
        <xs:annotation>
            <xs:documentation>Specifies an animation for a visualization.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:interaction">
                    <xs:attribute name="target" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>An frame that should be the target of animation.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="source" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>Data source.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="mode" type="vis:animationModeType">
                        <xs:annotation>
                            <xs:documentation>The type of animation controller to use.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="name" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>Name of the data column to use in the animation.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="start" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Starting value for the animation.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="end" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Ending value for the animation.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="delta" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Increment (delta) between animation frames.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="isFilter" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Set whether the nodes are filtered (true), or show/hide
                                (false)</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="inputDateFormatPattern" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The date input format pattern to use when reading this variable (for
                                example, M/dd/yy). If not defined, this column will not be considered a date
                                variable.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="styleReference">
        <xs:annotation>
            <xs:documentation>A reference to a style element. This is used when an element needs to reference multiple
                styles.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="ref" type="xs:IDREF" use="required">
                <xs:annotation>
                    <xs:documentation>The ID of the style being referenced.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="categories">
        <xs:annotation>
            <xs:documentation>Defines categories to be added to or removed from a parent. The
                content of this element is a semicolon delimited list.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:simpleContent>
                <xs:extension base="xs:string">
                    <xs:attribute name="remove" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, these categories will be removed from the
                                parent; otherwise, they will be added to the parent.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="variableReference">
        <xs:annotation>
            <xs:documentation>Use the variable identified by the ref attribute.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="ref" type="xs:IDREF" use="required">
                <xs:annotation>
                    <xs:documentation>The ID of the variable being referenced.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="domainReference">
        <xs:annotation>
            <xs:documentation>Include the specified domain.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="ref" type="xs:IDREF" use="required">
                <xs:annotation>
                    <xs:documentation>The ID of the domain being referenced.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="faceting">
        <xs:annotation>
            <xs:documentation>The faceting described by this element's children are applied outside the coordinate
                system, creating cells in a table of charts. The faceting describes an expression, which is combined
                with the element's expression (using the method attribute to combine the expressions) to give the final
                Grammar of Graphics expression for the element.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="vis:variableReference"/>
                <xs:element ref="vis:unity"/>
                <xs:element ref="vis:blend"/>
                <xs:element ref="vis:cross"/>
                <xs:element ref="vis:dot"/>
                <xs:element ref="vis:nest"/>
            </xs:choice>
            <xs:attribute name="method" type="xs:string">
                <xs:annotation>
                    <xs:documentation>How to combine the faceting with the main element expressions</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="sortType">
        <xs:sequence>
            <xs:element name="sortMove" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>Sort at the beginning or end of a categorical domain. Category sorts at the
                        beginning if the first attribute is true, otherwise it sorts at the end.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:attribute name="id" type="xs:ID">
                        <xs:annotation>
                            <xs:documentation>An identifier for this element. The identifier must be unique within the
                                document and is required only when another element must reference this
                                one.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="first" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>Whether the value sorts at the beginning or end.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="category" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>The value to be placed in the sort order.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="descending" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Whether to reverse the usual sorting order.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="embeddedSource">
        <xs:annotation>
            <xs:documentation>Data that are embedded in the XML.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:sourceType">
                    <xs:sequence>
                        <xs:element name="names" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>The names of the columns. This is a semicolon-separated list with a
                                    backslash used as an escaping character.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="types" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>The types of the columns. This is a semicolon-separated list of the
                                    same length as the names, with entries 'int', 'double' and 'string' used to define
                                    the types.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="row" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>The rows of the data matrix. This is a semicolon separated list of the
                                    same length as the names and types with a backslash used as an escaping character.
                                    An empty field is treated as missing.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="streamingSource">
        <xs:annotation>
            <xs:documentation>A source of streaming data.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:sourceType">
                    <xs:attribute name="url" use="required">
                        <xs:annotation>
                            <xs:documentation>The URL of a jar file containing a streaming source.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="userSource" type="vis:sourceType">
        <xs:annotation>
            <xs:documentation>This source is left undefined by the specification. An object satisfying the Source
                interface must be passed to a visualization prior to any action on the visualization. It must have the
                same ID as this source.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="delimitedFileSource">
        <xs:annotation>
            <xs:documentation>A source of data residing in a delimited file. Excel-style CSV files are a good
                example.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:sourceType">
                    <xs:attribute name="fileName" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>The path to the file to access.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="delimiter" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The string (usually a single character) that separates columns in the
                                file.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="header" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, the file contains a header row with the names of the
                                variables.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="databaseSource">
        <xs:annotation>
            <xs:documentation>A data source in a SQL database.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:sourceType">
                    <xs:attribute name="url" type="xs:anyURI" use="required">
                        <xs:annotation>
                            <xs:documentation>The URI giving the database location.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="driver" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The class name of the driver for accessing the database. If unspecified, a
                                default one is used.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="user" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The username to use to log onto the database.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="password" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The password used to log onto the database.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="table" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The database table to access. Cannot be used when 'query' is
                                specified.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="where" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The sql 'where' clause to use to filter data. Cannot be used when 'query'
                                is specified.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="query" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The sql query to send to the database. If this is specified, 'where' and
                                'table' must not be specified.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="reshapeSource">
        <xs:annotation>
            <xs:documentation>A source that reshapes input columns into new output columns.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:sourceType">
                    <xs:attribute name="base" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>The ID of the base source to reshape.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="input" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>Semicolon delimited list of variables from the base source to
                                reshape.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="output" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>Semicolon delimited list of variable names to use for the
                                results.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="aestheticMapping">
        <xs:annotation>
            <xs:documentation>Mapping from a category to a aesthetic.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="from" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Category that is mapped to a specific value of the aesthetic.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="colorMapping">
        <xs:annotation>
            <xs:documentation>Defines a custom mapping of categories to colors.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aestheticMapping">
                    <xs:attribute name="to" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>Color to which to map a category.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="lengthMapping">
        <xs:annotation>
            <xs:documentation>Specifies a mapping from a category to a length.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aestheticMapping">
                    <xs:attribute name="to" type="vis:length" use="required">
                        <xs:annotation>
                            <xs:documentation>Length to which to map a category.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="doubleMapping">
        <xs:annotation>
            <xs:documentation>Specifies a mapping from a category to a double value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aestheticMapping">
                    <xs:attribute name="to" use="required">
                        <xs:annotation>
                            <xs:documentation>(0 - 1) value to which to map a category.</xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minInclusive value="0"/>
                                <xs:maxInclusive value="1"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="integerMapping">
        <xs:annotation>
            <xs:documentation>Specifies a mapping from a category to a integer.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aestheticMapping">
                    <xs:attribute name="to" type="xs:integer" use="required">
                        <xs:annotation>
                            <xs:documentation>Integer value 0 or greater.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="stringMapping">
        <xs:annotation>
            <xs:documentation>Specifies a mapping from a category to a string.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aestheticMapping">
                    <xs:attribute name="to" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>A string representing an aesthetic value such as image
                                location.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="booleanMapping">
        <xs:annotation>
            <xs:documentation>Specifies a mapping from a category to a boolean.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aestheticMapping">
                    <xs:attribute name="to" type="xs:boolean" use="required">
                        <xs:annotation>
                            <xs:documentation>Boolean value 'true' or 'false'</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="dashMapping">
        <xs:annotation>
            <xs:documentation>Specifies a mapping from a category to a dash array.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aestheticMapping">
                    <xs:attribute name="to" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>The dash array (semicolon separated list of lengths).</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="symbolMapping">
        <xs:annotation>
            <xs:documentation>Maps a category to a symbol.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:aestheticMapping">
                    <xs:attribute name="to" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>Which symbol name to which to map a category.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="linkType">
        <xs:annotation>
            <xs:documentation>The type of linking to create.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="byDimension">
                <xs:annotation>
                    <xs:documentation>Links points to common locations such as
                        centroids.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="complete">
                <xs:annotation>
                    <xs:documentation>Draws a complete graph.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="minimalSpanningTree">
                <xs:annotation>
                    <xs:documentation>Draws a minimal spanning tree.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="nearestNeighbor">
                <xs:annotation>
                    <xs:documentation>Draws all nearest neighbor links.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="hull">
                <xs:annotation>
                    <xs:documentation>Draws the convex hull</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="join">
                <xs:annotation>
                    <xs:documentation>Joins up row i with row i+n/2. Any odd row will yield a single
                        point.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="sequence">
                <xs:annotation>
                    <xs:documentation>Joins up row 2*i with row 2*i+1. Any odd row will yield a single
                        point.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="delaunay">
                <xs:annotation>
                    <xs:documentation>Calculates the Delaunay triangulation of the set of points.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="tsp">
                <xs:annotation>
                    <xs:documentation>Makes a cycle of edges that represent the shortest route through a set of points.
                        This will be an approximation since the exact algorithm is NP-hard.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="alpha">
                <xs:annotation>
                    <xs:documentation>Draws an edge between any pair of points that can be touched by an open disk
                        D(alpha) containing no points.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="gabriel">
                <xs:annotation>
                    <xs:documentation>This is a subset of the Delaunay triangulation. Draws an edge between any pair of
                        points that have a D(2) containing no points.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="relativeNeighborhood">
                <xs:annotation>
                    <xs:documentation>This is a subset of the Delaunay triangulation. Draws an edge between any pair
                        of points p and q for which r is the distance between p and q and the intersection of D(p,r)
                        and D(q,r) contains no points. This intersection region is called a lune.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="knn">
                <xs:annotation>
                    <xs:documentation>Draws a directed edge between p and q if the distance between them is among the
                        k smallest distances.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="distance">
                <xs:annotation>
                    <xs:documentation>Draws an edge between any pair of points that both lie in a
                        D(r). The radius r defines the size of the neighborhood.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="influence">
                <xs:annotation>
                    <xs:documentation>Draws an edge between any pair of points p and q
                        if d(p,q) &lt;= dnn(p) + dnn(q), where dnn(x) is the nearest neighbor distance for point x.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="sourceType">
        <xs:annotation>
            <xs:documentation>A base for all types of source of data.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="aggregate" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>This causes a source to have similar rows aggregated. All non-key variables
                        returned from this source will be summed.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:attribute name="keyVariables" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>A semicolon delimited list of variable names that will be used as the
                                aggregation keys.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="generatedCount" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>If this attribute is defined, a column will be added to the source giving
                                the count of the number of rows aggregated into a single row.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="id" type="xs:ID">
                        <xs:annotation>
                            <xs:documentation>An identifier for this element. The identifier must be unique within the
                                document and is required only when another element must reference this
                                one.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
            <xs:element name="filter" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>An element that reduces the number of rows on the data by checking if the values
                        of a source variable are within a domain.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:attribute name="sourceName" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Name of the variable within the source. If unspecified, the row index is
                                used.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="domain" type="xs:IDREF" use="required">
                        <xs:annotation>
                            <xs:documentation>The domain to which to compare variable values.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="exclude" type="xs:boolean">
                        <xs:annotation>
                            <xs:documentation>If true, exclude values in the domain, otherwise include
                                them.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="id" type="xs:ID">
                        <xs:annotation>
                            <xs:documentation>An identifier for this element. The identifier must be unique within the
                                document and is required only when another element must reference this
                                one.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:attributeGroup name="lineAttributes">
        <xs:annotation>
            <xs:documentation>Attributes for lines and areas.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="breakRepresentation" type="vis:breakRepresentationType">
            <xs:annotation>
                <xs:documentation>How to represent breaks at missing data.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="showDiscontinuity" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>How to handle locations where there are multiple y values for a single x value. If
                    true, a gap is left in the line. If false, they are connected.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="closed" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the element's end point will be connected to its start
                    point.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="preserveStraightLines" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, lines are not curved within the space, but drawn straight from defined point
                    to defined point.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:complexType name="aesthetic">
        <xs:annotation>
            <xs:documentation>An aesthetic maps data to a graphic attribute.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="vis:scale" minOccurs="0"/>
            <xs:element ref="vis:summaryStatistic" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="vis:aestheticDataAttributes"/>
    </xs:complexType>

    <xs:complexType name="densityStatistic">
        <xs:annotation>
            <xs:documentation>A statistic that calculates a kernel density estimate of the
                distribution.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document and
                    is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="kernel" type="vis:kernelType">
            <xs:annotation>
                <xs:documentation>The type of kernel to use.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="marron" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Whether or not to use the Marron adjustment for discrete data.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="segments" type="xs:integer">
            <xs:annotation>
                <xs:documentation>The number of segments to predict.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="bounded" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Sets whether or not the model is bounded. If true, then the model is
                    bounded.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element name="setCellProperties">
        <xs:annotation>
            <xs:documentation>Sets styles on facet cells.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1">
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>Cell properties.</xs:documentation>
                    </xs:annotation>
                    <xs:element ref="vis:setMetaData"/>
                    <xs:element ref="vis:setFormat"/>
                    <xs:element ref="vis:setStyle"/>
                </xs:choice>
                <xs:element ref="vis:union" minOccurs="1" maxOccurs="1"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="union">
        <xs:annotation>
            <xs:documentation>Unions the intersection</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="vis:intersect"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="intersect">
        <xs:annotation>
            <xs:documentation>Restricts facet cells by intersecting where statements</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="vis:where"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="where">
        <xs:annotation>
            <xs:documentation>Restricts facet cells</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <!--<xs:sequence>-->
            <!--<xs:element ref="vis:variableReference"/>-->
            <!--</xs:sequence>-->
            <xs:attribute name="facetLevel" type="xs:integer" use="required">
                <xs:annotation>
                    <xs:documentation>A reference to a Variable.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the document
                        and is required only when another element must reference this one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="include" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Categories to include.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="exclude" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Categories to exclude.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="cellProperty" abstract="true">
        <xs:annotation>
            <xs:documentation>Base type for all cell properties.</xs:documentation>
        </xs:annotation>

        <xs:attribute name="id" type="xs:ID">
            <xs:annotation>
                <xs:documentation>An identifier for this element. The identifier must be unique within the document
                    and is required only when another element must reference this one.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="target" type="xs:IDREF">
            <xs:annotation>
                <xs:documentation>A target for the property.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element name="setStyle">
        <xs:annotation>
            <xs:documentation>Sets the style.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:cellProperty">
                    <xs:attribute name="style" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>A style for facet cells.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="setMetaData">
        <xs:annotation>
            <xs:documentation>Sets meta data.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:cellProperty">
                    <xs:attribute name="key" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The key for the metadata.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="value" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The value for the metadata.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="setFormat">
        <xs:annotation>
            <xs:documentation>Sets the format.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="vis:cellProperty">
                    <xs:choice minOccurs="1" maxOccurs="1">
                        <xs:element ref="vis:stringFormat"/>
                        <xs:element ref="vis:numberFormat"/>
                        <xs:element ref="vis:dateTimeFormat"/>
                        <xs:element ref="vis:elapsedTimeFormat"/>
                    </xs:choice>
                    <xs:attribute name="style" type="xs:IDREF">
                        <xs:annotation>
                            <xs:documentation>A format for facet cells.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="valueMapEntry">
        <xs:annotation>
            <xs:documentation>An entry in a value map that defines a derived variable.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID">
                <xs:annotation>
                    <xs:documentation>An identifier for this element. The identifier must be unique within the
                        document and is required only when another element must reference this
                        one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="from" type="xs:string">
                <xs:annotation>
                    <xs:documentation>A semicolon separated list of values to map from.</xs:documentation>
                </xs:annotation>
            </xs:attribute>

            <xs:attribute name="to" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The value to map to.</xs:documentation>
                </xs:annotation>
            </xs:attribute>

        </xs:complexType>
    </xs:element>
</xs:schema>